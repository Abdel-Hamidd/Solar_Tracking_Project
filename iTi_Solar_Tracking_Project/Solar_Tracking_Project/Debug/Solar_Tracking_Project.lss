
Solar_Tracking_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000021c6  0000225a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800074  00800074  0000226e  2**0
                  ALLOC
  3 .stab         00001b24  00000000  00000000  00002270  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e74  00000000  00000000  00003d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006b01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000079ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000879c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000088fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008b89  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009357  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ec       	ldi	r30, 0xC6	; 198
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <main>
      8a:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e6       	ldi	r26, 0x6B	; 107
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c6 10 	jmp	0x218c	; 0x218c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e6       	ldi	r24, 0x6B	; 107
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c6 10 	jmp	0x218c	; 0x218c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d6 10 	jmp	0x21ac	; 0x21ac <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <HLCD_voidSendCommand>:
#include "HLCD_private.h"
#include <util/delay.h>


void HLCD_voidSendCommand(u8 copy_u8Command)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f
	/* CLR RS to send command */
	MDIO_Error_State_tSetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_LOW);
     b5c:	84 e0       	ldi	r24, 0x04	; 4
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 dd 09 	call	0x13ba	; 0x13ba <MDIO_Error_State_tSetPinValue>
	/* CLR R/W to write */
	MDIO_Error_State_tSetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_LOW);
     b66:	84 e0       	ldi	r24, 0x04	; 4
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 dd 09 	call	0x13ba	; 0x13ba <MDIO_Error_State_tSetPinValue>
	/* Send command */
	MDIO_EnumSetPortValue(LCD_PORT_DATA,copy_u8Command);
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	6f 85       	ldd	r22, Y+15	; 0x0f
     b74:	0e 94 a7 0b 	call	0x174e	; 0x174e <MDIO_EnumSetPortValue>
	/* Set EN to make LCD MICRO . read command */
	MDIO_Error_State_tSetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
     b78:	84 e0       	ldi	r24, 0x04	; 4
     b7a:	62 e0       	ldi	r22, 0x02	; 2
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 dd 09 	call	0x13ba	; 0x13ba <MDIO_Error_State_tSetPinValue>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e4       	ldi	r27, 0x40	; 64
     b8a:	8b 87       	std	Y+11, r24	; 0x0b
     b8c:	9c 87       	std	Y+12, r25	; 0x0c
     b8e:	ad 87       	std	Y+13, r26	; 0x0d
     b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	6b 85       	ldd	r22, Y+11	; 0x0b
     b94:	7c 85       	ldd	r23, Y+12	; 0x0c
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a ef       	ldi	r20, 0xFA	; 250
     ba0:	54 e4       	ldi	r21, 0x44	; 68
     ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8f 83       	std	Y+7, r24	; 0x07
     bac:	98 87       	std	Y+8, r25	; 0x08
     bae:	a9 87       	std	Y+9, r26	; 0x09
     bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb2:	6f 81       	ldd	r22, Y+7	; 0x07
     bb4:	78 85       	ldd	r23, Y+8	; 0x08
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9e 83       	std	Y+6, r25	; 0x06
     bd0:	8d 83       	std	Y+5, r24	; 0x05
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	6b 85       	ldd	r22, Y+11	; 0x0b
     bee:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <HLCD_voidSendCommand+0xee>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <HLCD_voidSendCommand+0xdc>
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <HLCD_voidSendCommand+0xd0>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6f 81       	ldd	r22, Y+7	; 0x07
     c40:	78 85       	ldd	r23, Y+8	; 0x08
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <HLCD_voidSendCommand+0x118>
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_tSetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
     c66:	84 e0       	ldi	r24, 0x04	; 4
     c68:	62 e0       	ldi	r22, 0x02	; 2
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	0e 94 dd 09 	call	0x13ba	; 0x13ba <MDIO_Error_State_tSetPinValue>
}
     c70:	2f 96       	adiw	r28, 0x0f	; 15
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <HLCD_voidSendData>:

void HLCD_voidSendData(u8 copy_u8Data)
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2f 97       	sbiw	r28, 0x0f	; 15
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	8f 87       	std	Y+15, r24	; 0x0f
	/* SET RS to send command */
	MDIO_Error_State_tSetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_HIGH);
     c98:	84 e0       	ldi	r24, 0x04	; 4
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	0e 94 dd 09 	call	0x13ba	; 0x13ba <MDIO_Error_State_tSetPinValue>
	/* CLR R/W to write */
	MDIO_Error_State_tSetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_LOW);
     ca2:	84 e0       	ldi	r24, 0x04	; 4
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	0e 94 dd 09 	call	0x13ba	; 0x13ba <MDIO_Error_State_tSetPinValue>
	/* Send command */
	MDIO_EnumSetPortValue(LCD_PORT_DATA,copy_u8Data);
     cac:	83 e0       	ldi	r24, 0x03	; 3
     cae:	6f 85       	ldd	r22, Y+15	; 0x0f
     cb0:	0e 94 a7 0b 	call	0x174e	; 0x174e <MDIO_EnumSetPortValue>
	/* Set EN to make LCD MICRO . read command */
	MDIO_Error_State_tSetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
     cb4:	84 e0       	ldi	r24, 0x04	; 4
     cb6:	62 e0       	ldi	r22, 0x02	; 2
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 dd 09 	call	0x13ba	; 0x13ba <MDIO_Error_State_tSetPinValue>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e4       	ldi	r27, 0x40	; 64
     cc6:	8b 87       	std	Y+11, r24	; 0x0b
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	ad 87       	std	Y+13, r26	; 0x0d
     ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cce:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	4a ef       	ldi	r20, 0xFA	; 250
     cdc:	54 e4       	ldi	r21, 0x44	; 68
     cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	a9 87       	std	Y+9, r26	; 0x09
     cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	2c f4       	brge	.+10     	; 0xd10 <HLCD_voidSendData+0x8e>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	57 e4       	ldi	r21, 0x47	; 71
     d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d24:	18 16       	cp	r1, r24
     d26:	4c f5       	brge	.+82     	; 0xd7a <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <HLCD_voidSendData+0xee>
     d52:	88 ec       	ldi	r24, 0xC8	; 200
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <HLCD_voidSendData+0xdc>
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f7       	brne	.-38     	; 0xd52 <HLCD_voidSendData+0xd0>
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <HLCD_voidSendData+0x118>
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_tSetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
     da2:	84 e0       	ldi	r24, 0x04	; 4
     da4:	62 e0       	ldi	r22, 0x02	; 2
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	0e 94 dd 09 	call	0x13ba	; 0x13ba <MDIO_Error_State_tSetPinValue>
}
     dac:	2f 96       	adiw	r28, 0x0f	; 15
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <HLCD_voidInit>:

void HLCD_voidInit (void)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	2e 97       	sbiw	r28, 0x0e	; 14
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a0 e2       	ldi	r26, 0x20	; 32
     dd8:	b2 e4       	ldi	r27, 0x42	; 66
     dda:	8b 87       	std	Y+11, r24	; 0x0b
     ddc:	9c 87       	std	Y+12, r25	; 0x0c
     dde:	ad 87       	std	Y+13, r26	; 0x0d
     de0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de2:	6b 85       	ldd	r22, Y+11	; 0x0b
     de4:	7c 85       	ldd	r23, Y+12	; 0x0c
     de6:	8d 85       	ldd	r24, Y+13	; 0x0d
     de8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	4a ef       	ldi	r20, 0xFA	; 250
     df0:	54 e4       	ldi	r21, 0x44	; 68
     df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	8f 83       	std	Y+7, r24	; 0x07
     dfc:	98 87       	std	Y+8, r25	; 0x08
     dfe:	a9 87       	std	Y+9, r26	; 0x09
     e00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e02:	6f 81       	ldd	r22, Y+7	; 0x07
     e04:	78 85       	ldd	r23, Y+8	; 0x08
     e06:	89 85       	ldd	r24, Y+9	; 0x09
     e08:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e8       	ldi	r20, 0x80	; 128
     e10:	5f e3       	ldi	r21, 0x3F	; 63
     e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e16:	88 23       	and	r24, r24
     e18:	2c f4       	brge	.+10     	; 0xe24 <HLCD_voidInit+0x66>
		__ticks = 1;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	9e 83       	std	Y+6, r25	; 0x06
     e20:	8d 83       	std	Y+5, r24	; 0x05
     e22:	3f c0       	rjmp	.+126    	; 0xea2 <HLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     e24:	6f 81       	ldd	r22, Y+7	; 0x07
     e26:	78 85       	ldd	r23, Y+8	; 0x08
     e28:	89 85       	ldd	r24, Y+9	; 0x09
     e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	3f ef       	ldi	r19, 0xFF	; 255
     e30:	4f e7       	ldi	r20, 0x7F	; 127
     e32:	57 e4       	ldi	r21, 0x47	; 71
     e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e38:	18 16       	cp	r1, r24
     e3a:	4c f5       	brge	.+82     	; 0xe8e <HLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e40:	8d 85       	ldd	r24, Y+13	; 0x0d
     e42:	9e 85       	ldd	r25, Y+14	; 0x0e
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e2       	ldi	r20, 0x20	; 32
     e4a:	51 e4       	ldi	r21, 0x41	; 65
     e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	bc 01       	movw	r22, r24
     e56:	cd 01       	movw	r24, r26
     e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	9e 83       	std	Y+6, r25	; 0x06
     e62:	8d 83       	std	Y+5, r24	; 0x05
     e64:	0f c0       	rjmp	.+30     	; 0xe84 <HLCD_voidInit+0xc6>
     e66:	88 ec       	ldi	r24, 0xC8	; 200
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	9c 83       	std	Y+4, r25	; 0x04
     e6c:	8b 83       	std	Y+3, r24	; 0x03
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	9c 81       	ldd	r25, Y+4	; 0x04
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <HLCD_voidInit+0xb4>
     e76:	9c 83       	std	Y+4, r25	; 0x04
     e78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7a:	8d 81       	ldd	r24, Y+5	; 0x05
     e7c:	9e 81       	ldd	r25, Y+6	; 0x06
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	9e 83       	std	Y+6, r25	; 0x06
     e82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	9e 81       	ldd	r25, Y+6	; 0x06
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	69 f7       	brne	.-38     	; 0xe66 <HLCD_voidInit+0xa8>
     e8c:	14 c0       	rjmp	.+40     	; 0xeb6 <HLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8e:	6f 81       	ldd	r22, Y+7	; 0x07
     e90:	78 85       	ldd	r23, Y+8	; 0x08
     e92:	89 85       	ldd	r24, Y+9	; 0x09
     e94:	9a 85       	ldd	r25, Y+10	; 0x0a
     e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	9e 83       	std	Y+6, r25	; 0x06
     ea0:	8d 83       	std	Y+5, r24	; 0x05
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	9e 81       	ldd	r25, Y+6	; 0x06
     ea6:	9a 83       	std	Y+2, r25	; 0x02
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <HLCD_voidInit+0xf0>
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	HLCD_voidSendCommand(0b00111100); /// function set
     eb6:	8c e3       	ldi	r24, 0x3C	; 60
     eb8:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0b00001100); // display on/off control
     ebc:	8c e0       	ldi	r24, 0x0C	; 12
     ebe:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(1); // clear screen
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_voidSendCommand>

}
     ec8:	2e 96       	adiw	r28, 0x0e	; 14
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <HLCD_SendString>:

void HLCD_SendString(char *str)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <HLCD_SendString+0x6>
     ee0:	0f 92       	push	r0
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	9b 83       	std	Y+3, r25	; 0x03
     ee8:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	for(i=0;str[i];i++)
     eea:	19 82       	std	Y+1, r1	; 0x01
     eec:	0e c0       	rjmp	.+28     	; 0xf0a <HLCD_SendString+0x30>
	{
		HLCD_voidSendData(str[i]);
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	9b 81       	ldd	r25, Y+3	; 0x03
     ef8:	fc 01       	movw	r30, r24
     efa:	e2 0f       	add	r30, r18
     efc:	f3 1f       	adc	r31, r19
     efe:	80 81       	ld	r24, Z
     f00:	0e 94 41 06 	call	0xc82	; 0xc82 <HLCD_voidSendData>
}

void HLCD_SendString(char *str)
{
	u8 i;
	for(i=0;str[i];i++)
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	8f 5f       	subi	r24, 0xFF	; 255
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	9b 81       	ldd	r25, Y+3	; 0x03
     f14:	fc 01       	movw	r30, r24
     f16:	e2 0f       	add	r30, r18
     f18:	f3 1f       	adc	r31, r19
     f1a:	80 81       	ld	r24, Z
     f1c:	88 23       	and	r24, r24
     f1e:	39 f7       	brne	.-50     	; 0xeee <HLCD_SendString+0x14>
	{
		HLCD_voidSendData(str[i]);
	}
}
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <HLCD_SetCursor>:

void HLCD_SetCursor(u8 line ,u8 cell)        // line 0:1  cell 0:15
{
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	00 d0       	rcall	.+0      	; 0xf32 <HLCD_SetCursor+0x6>
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	89 83       	std	Y+1, r24	; 0x01
     f38:	6a 83       	std	Y+2, r22	; 0x02
	if(line==0)
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	88 23       	and	r24, r24
     f3e:	29 f4       	brne	.+10     	; 0xf4a <HLCD_SetCursor+0x1e>
	{
		HLCD_voidSendCommand(0x80|cell);   // set dd ram address to line 0 and set the cell that the user has entered
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	80 68       	ori	r24, 0x80	; 128
     f44:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_voidSendCommand>
     f48:	07 c0       	rjmp	.+14     	; 0xf58 <HLCD_SetCursor+0x2c>
	}
	else if(line==1)
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	81 30       	cpi	r24, 0x01	; 1
     f4e:	21 f4       	brne	.+8      	; 0xf58 <HLCD_SetCursor+0x2c>
	{
		HLCD_voidSendCommand(0x80|0x40|cell);  // set dd ram address to line 1 and set the cell that the user has entered
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	80 6c       	ori	r24, 0xC0	; 192
     f54:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_voidSendCommand>
	}
}
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <HLCD_SendInt>:
void HLCD_SendInt (s32 num)
{
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	60 97       	sbiw	r28, 0x10	; 16
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	f8 94       	cli
     f74:	de bf       	out	0x3e, r29	; 62
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	cd bf       	out	0x3d, r28	; 61
     f7a:	6d 87       	std	Y+13, r22	; 0x0d
     f7c:	7e 87       	std	Y+14, r23	; 0x0e
     f7e:	8f 87       	std	Y+15, r24	; 0x0f
     f80:	98 8b       	std	Y+16, r25	; 0x10
	u8 i=0,str[10];
     f82:	1a 82       	std	Y+2, r1	; 0x02
	s8 j;

	if(num==0)
     f84:	8d 85       	ldd	r24, Y+13	; 0x0d
     f86:	9e 85       	ldd	r25, Y+14	; 0x0e
     f88:	af 85       	ldd	r26, Y+15	; 0x0f
     f8a:	b8 89       	ldd	r27, Y+16	; 0x10
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	a1 05       	cpc	r26, r1
     f90:	b1 05       	cpc	r27, r1
     f92:	21 f4       	brne	.+8      	; 0xf9c <HLCD_SendInt+0x3a>
	{
		HLCD_voidSendData('0');
     f94:	80 e3       	ldi	r24, 0x30	; 48
     f96:	0e 94 41 06 	call	0xc82	; 0xc82 <HLCD_voidSendData>
     f9a:	67 c0       	rjmp	.+206    	; 0x106a <HLCD_SendInt+0x108>
		return;
	}
	if(num<0)
     f9c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f9e:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa0:	af 85       	ldd	r26, Y+15	; 0x0f
     fa2:	b8 89       	ldd	r27, Y+16	; 0x10
     fa4:	bb 23       	and	r27, r27
     fa6:	0c f0       	brlt	.+2      	; 0xfaa <HLCD_SendInt+0x48>
     fa8:	41 c0       	rjmp	.+130    	; 0x102c <HLCD_SendInt+0xca>
	{
		HLCD_voidSendData('-');
     faa:	8d e2       	ldi	r24, 0x2D	; 45
     fac:	0e 94 41 06 	call	0xc82	; 0xc82 <HLCD_voidSendData>
		num=num*(-1);
     fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb4:	af 85       	ldd	r26, Y+15	; 0x0f
     fb6:	b8 89       	ldd	r27, Y+16	; 0x10
     fb8:	b0 95       	com	r27
     fba:	a0 95       	com	r26
     fbc:	90 95       	com	r25
     fbe:	81 95       	neg	r24
     fc0:	9f 4f       	sbci	r25, 0xFF	; 255
     fc2:	af 4f       	sbci	r26, 0xFF	; 255
     fc4:	bf 4f       	sbci	r27, 0xFF	; 255
     fc6:	8d 87       	std	Y+13, r24	; 0x0d
     fc8:	9e 87       	std	Y+14, r25	; 0x0e
     fca:	af 87       	std	Y+15, r26	; 0x0f
     fcc:	b8 8b       	std	Y+16, r27	; 0x10
     fce:	2e c0       	rjmp	.+92     	; 0x102c <HLCD_SendInt+0xca>
	}

	while(num)
	{
		str[i]=(num%10)+'0';
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	08 2f       	mov	r16, r24
     fd4:	10 e0       	ldi	r17, 0x00	; 0
     fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     fda:	af 85       	ldd	r26, Y+15	; 0x0f
     fdc:	b8 89       	ldd	r27, Y+16	; 0x10
     fde:	2a e0       	ldi	r18, 0x0A	; 10
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e0       	ldi	r20, 0x00	; 0
     fe4:	50 e0       	ldi	r21, 0x00	; 0
     fe6:	bc 01       	movw	r22, r24
     fe8:	cd 01       	movw	r24, r26
     fea:	0e 94 8f 10 	call	0x211e	; 0x211e <__divmodsi4>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	28 2f       	mov	r18, r24
     ff4:	20 5d       	subi	r18, 0xD0	; 208
     ff6:	ce 01       	movw	r24, r28
     ff8:	03 96       	adiw	r24, 0x03	; 3
     ffa:	fc 01       	movw	r30, r24
     ffc:	e0 0f       	add	r30, r16
     ffe:	f1 1f       	adc	r31, r17
    1000:	20 83       	st	Z, r18
		num=num/10;
    1002:	8d 85       	ldd	r24, Y+13	; 0x0d
    1004:	9e 85       	ldd	r25, Y+14	; 0x0e
    1006:	af 85       	ldd	r26, Y+15	; 0x0f
    1008:	b8 89       	ldd	r27, Y+16	; 0x10
    100a:	2a e0       	ldi	r18, 0x0A	; 10
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	40 e0       	ldi	r20, 0x00	; 0
    1010:	50 e0       	ldi	r21, 0x00	; 0
    1012:	bc 01       	movw	r22, r24
    1014:	cd 01       	movw	r24, r26
    1016:	0e 94 8f 10 	call	0x211e	; 0x211e <__divmodsi4>
    101a:	da 01       	movw	r26, r20
    101c:	c9 01       	movw	r24, r18
    101e:	8d 87       	std	Y+13, r24	; 0x0d
    1020:	9e 87       	std	Y+14, r25	; 0x0e
    1022:	af 87       	std	Y+15, r26	; 0x0f
    1024:	b8 8b       	std	Y+16, r27	; 0x10
		i++;
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	8f 5f       	subi	r24, 0xFF	; 255
    102a:	8a 83       	std	Y+2, r24	; 0x02
	{
		HLCD_voidSendData('-');
		num=num*(-1);
	}

	while(num)
    102c:	8d 85       	ldd	r24, Y+13	; 0x0d
    102e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1030:	af 85       	ldd	r26, Y+15	; 0x0f
    1032:	b8 89       	ldd	r27, Y+16	; 0x10
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	a1 05       	cpc	r26, r1
    1038:	b1 05       	cpc	r27, r1
    103a:	51 f6       	brne	.-108    	; 0xfd0 <HLCD_SendInt+0x6e>
		str[i]=(num%10)+'0';
		num=num/10;
		i++;
	}

	for(j=i-1;j>=0;j--)
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	81 50       	subi	r24, 0x01	; 1
    1040:	89 83       	std	Y+1, r24	; 0x01
    1042:	10 c0       	rjmp	.+32     	; 0x1064 <HLCD_SendInt+0x102>
	{

		HLCD_voidSendData(str[j]);
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	28 2f       	mov	r18, r24
    1048:	33 27       	eor	r19, r19
    104a:	27 fd       	sbrc	r18, 7
    104c:	30 95       	com	r19
    104e:	ce 01       	movw	r24, r28
    1050:	03 96       	adiw	r24, 0x03	; 3
    1052:	fc 01       	movw	r30, r24
    1054:	e2 0f       	add	r30, r18
    1056:	f3 1f       	adc	r31, r19
    1058:	80 81       	ld	r24, Z
    105a:	0e 94 41 06 	call	0xc82	; 0xc82 <HLCD_voidSendData>
		str[i]=(num%10)+'0';
		num=num/10;
		i++;
	}

	for(j=i-1;j>=0;j--)
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	81 50       	subi	r24, 0x01	; 1
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	88 23       	and	r24, r24
    1068:	6c f7       	brge	.-38     	; 0x1044 <HLCD_SendInt+0xe2>
	{

		HLCD_voidSendData(str[j]);
	}
}
    106a:	60 96       	adiw	r28, 0x10	; 16
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	cd bf       	out	0x3d, r28	; 61
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	1f 91       	pop	r17
    107c:	0f 91       	pop	r16
    107e:	08 95       	ret

00001080 <MADC_voidInit>:
#include "MADC_private.h"
#include "MADC_config.h"


void MADC_voidInit (void)
{
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
	/* SELECT V REF */
	CLR_BIT(ADMUX,ADMUX_REFS1);
    1088:	a7 e2       	ldi	r26, 0x27	; 39
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e7 e2       	ldi	r30, 0x27	; 39
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	8f 77       	andi	r24, 0x7F	; 127
    1094:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS0);
    1096:	a7 e2       	ldi	r26, 0x27	; 39
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e7 e2       	ldi	r30, 0x27	; 39
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	80 64       	ori	r24, 0x40	; 64
    10a2:	8c 93       	st	X, r24
	/* SELECT RIGHT ADUJST */
	CLR_BIT(ADMUX,ADMUX_ADLAR);
    10a4:	a7 e2       	ldi	r26, 0x27	; 39
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e7 e2       	ldi	r30, 0x27	; 39
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	8f 7d       	andi	r24, 0xDF	; 223
    10b0:	8c 93       	st	X, r24
	/*SELECT PRESCALER MCU GRQ  32  */
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
    10b2:	a6 e2       	ldi	r26, 0x26	; 38
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e6 e2       	ldi	r30, 0x26	; 38
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	81 60       	ori	r24, 0x01	; 1
    10be:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    10c0:	a6 e2       	ldi	r26, 0x26	; 38
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e6 e2       	ldi	r30, 0x26	; 38
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	8d 7f       	andi	r24, 0xFD	; 253
    10cc:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
    10ce:	a6 e2       	ldi	r26, 0x26	; 38
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e6 e2       	ldi	r30, 0x26	; 38
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	84 60       	ori	r24, 0x04	; 4
    10da:	8c 93       	st	X, r24
	/* ADC ENABLE */
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    10dc:	a6 e2       	ldi	r26, 0x26	; 38
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e6 e2       	ldi	r30, 0x26	; 38
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	80 68       	ori	r24, 0x80	; 128
    10e8:	8c 93       	st	X, r24
}
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <MADC_u16GetValue>:

u16 MADC_u16GetValue(u8 copy_u8AdcChannel)
{
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	0f 92       	push	r0
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	89 83       	std	Y+1, r24	; 0x01
	/* clear the selection bits  */
	ADMUX&=0b1100000;
    10fc:	a7 e2       	ldi	r26, 0x27	; 39
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e7 e2       	ldi	r30, 0x27	; 39
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	80 76       	andi	r24, 0x60	; 96
    1108:	8c 93       	st	X, r24
	/* select ADC channel */
	ADMUX|=copy_u8AdcChannel;
    110a:	a7 e2       	ldi	r26, 0x27	; 39
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e7 e2       	ldi	r30, 0x27	; 39
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	90 81       	ld	r25, Z
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	89 2b       	or	r24, r25
    1118:	8c 93       	st	X, r24
	/* ADC start conversion */
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    111a:	a6 e2       	ldi	r26, 0x26	; 38
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e6 e2       	ldi	r30, 0x26	; 38
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	80 64       	ori	r24, 0x40	; 64
    1126:	8c 93       	st	X, r24
	/* busy wait until ADC complete conversion */
	while(GET_BIT(ADCSRA,ADCSRA_ADIF)==0);
    1128:	e6 e2       	ldi	r30, 0x26	; 38
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	88 2f       	mov	r24, r24
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	80 71       	andi	r24, 0x10	; 16
    1134:	90 70       	andi	r25, 0x00	; 0
    1136:	95 95       	asr	r25
    1138:	87 95       	ror	r24
    113a:	95 95       	asr	r25
    113c:	87 95       	ror	r24
    113e:	95 95       	asr	r25
    1140:	87 95       	ror	r24
    1142:	95 95       	asr	r25
    1144:	87 95       	ror	r24
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	79 f3       	breq	.-34     	; 0x1128 <MADC_u16GetValue+0x38>
	/* clear ADC flag */
	SET_BIT(ADCSRA,ADCSRA_ADIF);
    114a:	a6 e2       	ldi	r26, 0x26	; 38
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e6 e2       	ldi	r30, 0x26	; 38
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	80 61       	ori	r24, 0x10	; 16
    1156:	8c 93       	st	X, r24

	return ADC_DATA_REG;
    1158:	e4 e2       	ldi	r30, 0x24	; 36
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1160:	0f 90       	pop	r0
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <PORT_voidInit>:
#include "MDIO_cnfig.h"
#include "MDIO_private.h"


void PORT_voidInit (void)
{
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    1170:	ea e3       	ldi	r30, 0x3A	; 58
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	8e ef       	ldi	r24, 0xFE	; 254
    1176:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    1178:	e7 e3       	ldi	r30, 0x37	; 55
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	8f ef       	ldi	r24, 0xFF	; 255
    117e:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    1180:	e4 e3       	ldi	r30, 0x34	; 52
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	8f ef       	ldi	r24, 0xFF	; 255
    1186:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    1188:	e1 e3       	ldi	r30, 0x31	; 49
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	8f ef       	ldi	r24, 0xFF	; 255
    118e:	80 83       	st	Z, r24

	PORTA =PORTA_VALUE;
    1190:	eb e3       	ldi	r30, 0x3B	; 59
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	8e ef       	ldi	r24, 0xFE	; 254
    1196:	80 83       	st	Z, r24
	PORTB =PORTB_VALUE;
    1198:	e8 e3       	ldi	r30, 0x38	; 56
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	8f ef       	ldi	r24, 0xFF	; 255
    119e:	80 83       	st	Z, r24
	PORTC =PORTC_VALUE;
    11a0:	e5 e3       	ldi	r30, 0x35	; 53
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	8f ef       	ldi	r24, 0xFF	; 255
    11a6:	80 83       	st	Z, r24


	PORTD = PORTD_VALUE;
    11a8:	e2 e3       	ldi	r30, 0x32	; 50
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	8f ef       	ldi	r24, 0xFF	; 255
    11ae:	80 83       	st	Z, r24
}
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <MDIO_voidSetPinDirection>:

void MDIO_voidSetPinDirection (u8 copy_u8Port , u8 copy_u8Pin , u8 copy_u8Mode )
{
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	27 97       	sbiw	r28, 0x07	; 7
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	89 83       	std	Y+1, r24	; 0x01
    11cc:	6a 83       	std	Y+2, r22	; 0x02
    11ce:	4b 83       	std	Y+3, r20	; 0x03


	if(copy_u8Mode==DIO_INTPUT)
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	88 23       	and	r24, r24
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <MDIO_voidSetPinDirection+0x22>
    11d6:	75 c0       	rjmp	.+234    	; 0x12c2 <MDIO_voidSetPinDirection+0x10c>
	{
		switch(copy_u8Port)
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	3f 83       	std	Y+7, r19	; 0x07
    11e0:	2e 83       	std	Y+6, r18	; 0x06
    11e2:	8e 81       	ldd	r24, Y+6	; 0x06
    11e4:	9f 81       	ldd	r25, Y+7	; 0x07
    11e6:	82 30       	cpi	r24, 0x02	; 2
    11e8:	91 05       	cpc	r25, r1
    11ea:	61 f1       	breq	.+88     	; 0x1244 <MDIO_voidSetPinDirection+0x8e>
    11ec:	2e 81       	ldd	r18, Y+6	; 0x06
    11ee:	3f 81       	ldd	r19, Y+7	; 0x07
    11f0:	23 30       	cpi	r18, 0x03	; 3
    11f2:	31 05       	cpc	r19, r1
    11f4:	34 f4       	brge	.+12     	; 0x1202 <MDIO_voidSetPinDirection+0x4c>
    11f6:	8e 81       	ldd	r24, Y+6	; 0x06
    11f8:	9f 81       	ldd	r25, Y+7	; 0x07
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	91 05       	cpc	r25, r1
    11fe:	69 f0       	breq	.+26     	; 0x121a <MDIO_voidSetPinDirection+0x64>
    1200:	d3 c0       	rjmp	.+422    	; 0x13a8 <MDIO_voidSetPinDirection+0x1f2>
    1202:	2e 81       	ldd	r18, Y+6	; 0x06
    1204:	3f 81       	ldd	r19, Y+7	; 0x07
    1206:	23 30       	cpi	r18, 0x03	; 3
    1208:	31 05       	cpc	r19, r1
    120a:	89 f1       	breq	.+98     	; 0x126e <MDIO_voidSetPinDirection+0xb8>
    120c:	8e 81       	ldd	r24, Y+6	; 0x06
    120e:	9f 81       	ldd	r25, Y+7	; 0x07
    1210:	84 30       	cpi	r24, 0x04	; 4
    1212:	91 05       	cpc	r25, r1
    1214:	09 f4       	brne	.+2      	; 0x1218 <MDIO_voidSetPinDirection+0x62>
    1216:	40 c0       	rjmp	.+128    	; 0x1298 <MDIO_voidSetPinDirection+0xe2>
    1218:	c7 c0       	rjmp	.+398    	; 0x13a8 <MDIO_voidSetPinDirection+0x1f2>
		{
		case DIO_PORTA : CLR_BIT(DDRA,copy_u8Pin);break;
    121a:	aa e3       	ldi	r26, 0x3A	; 58
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	ea e3       	ldi	r30, 0x3A	; 58
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	48 2f       	mov	r20, r24
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 2e       	mov	r0, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <MDIO_voidSetPinDirection+0x82>
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	0a 94       	dec	r0
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <MDIO_voidSetPinDirection+0x7e>
    123c:	80 95       	com	r24
    123e:	84 23       	and	r24, r20
    1240:	8c 93       	st	X, r24
    1242:	b2 c0       	rjmp	.+356    	; 0x13a8 <MDIO_voidSetPinDirection+0x1f2>
		case DIO_PORTB : CLR_BIT(DDRB,copy_u8Pin);break;
    1244:	a7 e3       	ldi	r26, 0x37	; 55
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e7 e3       	ldi	r30, 0x37	; 55
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	48 2f       	mov	r20, r24
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 2e       	mov	r0, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <MDIO_voidSetPinDirection+0xac>
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	0a 94       	dec	r0
    1264:	e2 f7       	brpl	.-8      	; 0x125e <MDIO_voidSetPinDirection+0xa8>
    1266:	80 95       	com	r24
    1268:	84 23       	and	r24, r20
    126a:	8c 93       	st	X, r24
    126c:	9d c0       	rjmp	.+314    	; 0x13a8 <MDIO_voidSetPinDirection+0x1f2>
		case DIO_PORTC : CLR_BIT(DDRC,copy_u8Pin);break;
    126e:	a4 e3       	ldi	r26, 0x34	; 52
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e4 e3       	ldi	r30, 0x34	; 52
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	48 2f       	mov	r20, r24
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	02 2e       	mov	r0, r18
    1286:	02 c0       	rjmp	.+4      	; 0x128c <MDIO_voidSetPinDirection+0xd6>
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	0a 94       	dec	r0
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <MDIO_voidSetPinDirection+0xd2>
    1290:	80 95       	com	r24
    1292:	84 23       	and	r24, r20
    1294:	8c 93       	st	X, r24
    1296:	88 c0       	rjmp	.+272    	; 0x13a8 <MDIO_voidSetPinDirection+0x1f2>
		case DIO_PORTD : CLR_BIT(DDRD,copy_u8Pin);break;
    1298:	a1 e3       	ldi	r26, 0x31	; 49
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e1 e3       	ldi	r30, 0x31	; 49
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	48 2f       	mov	r20, r24
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 2e       	mov	r0, r18
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <MDIO_voidSetPinDirection+0x100>
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	0a 94       	dec	r0
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <MDIO_voidSetPinDirection+0xfc>
    12ba:	80 95       	com	r24
    12bc:	84 23       	and	r24, r20
    12be:	8c 93       	st	X, r24
    12c0:	73 c0       	rjmp	.+230    	; 0x13a8 <MDIO_voidSetPinDirection+0x1f2>
		default : break;

		}
	}
	else if (copy_u8Mode==DIO_OUTPUT)
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	09 f0       	breq	.+2      	; 0x12ca <MDIO_voidSetPinDirection+0x114>
    12c8:	6f c0       	rjmp	.+222    	; 0x13a8 <MDIO_voidSetPinDirection+0x1f2>
	{
		switch(copy_u8Port)
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	3d 83       	std	Y+5, r19	; 0x05
    12d2:	2c 83       	std	Y+4, r18	; 0x04
    12d4:	8c 81       	ldd	r24, Y+4	; 0x04
    12d6:	9d 81       	ldd	r25, Y+5	; 0x05
    12d8:	82 30       	cpi	r24, 0x02	; 2
    12da:	91 05       	cpc	r25, r1
    12dc:	51 f1       	breq	.+84     	; 0x1332 <MDIO_voidSetPinDirection+0x17c>
    12de:	2c 81       	ldd	r18, Y+4	; 0x04
    12e0:	3d 81       	ldd	r19, Y+5	; 0x05
    12e2:	23 30       	cpi	r18, 0x03	; 3
    12e4:	31 05       	cpc	r19, r1
    12e6:	34 f4       	brge	.+12     	; 0x12f4 <MDIO_voidSetPinDirection+0x13e>
    12e8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ea:	9d 81       	ldd	r25, Y+5	; 0x05
    12ec:	81 30       	cpi	r24, 0x01	; 1
    12ee:	91 05       	cpc	r25, r1
    12f0:	61 f0       	breq	.+24     	; 0x130a <MDIO_voidSetPinDirection+0x154>
    12f2:	5a c0       	rjmp	.+180    	; 0x13a8 <MDIO_voidSetPinDirection+0x1f2>
    12f4:	2c 81       	ldd	r18, Y+4	; 0x04
    12f6:	3d 81       	ldd	r19, Y+5	; 0x05
    12f8:	23 30       	cpi	r18, 0x03	; 3
    12fa:	31 05       	cpc	r19, r1
    12fc:	71 f1       	breq	.+92     	; 0x135a <MDIO_voidSetPinDirection+0x1a4>
    12fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1300:	9d 81       	ldd	r25, Y+5	; 0x05
    1302:	84 30       	cpi	r24, 0x04	; 4
    1304:	91 05       	cpc	r25, r1
    1306:	e9 f1       	breq	.+122    	; 0x1382 <MDIO_voidSetPinDirection+0x1cc>
    1308:	4f c0       	rjmp	.+158    	; 0x13a8 <MDIO_voidSetPinDirection+0x1f2>
		{
		case DIO_PORTA : SET_BIT(DDRA,copy_u8Pin);break;
    130a:	aa e3       	ldi	r26, 0x3A	; 58
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	ea e3       	ldi	r30, 0x3A	; 58
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	48 2f       	mov	r20, r24
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 2e       	mov	r0, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <MDIO_voidSetPinDirection+0x172>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	0a 94       	dec	r0
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <MDIO_voidSetPinDirection+0x16e>
    132c:	84 2b       	or	r24, r20
    132e:	8c 93       	st	X, r24
    1330:	3b c0       	rjmp	.+118    	; 0x13a8 <MDIO_voidSetPinDirection+0x1f2>
		case DIO_PORTB : SET_BIT(DDRB,copy_u8Pin);break;
    1332:	a7 e3       	ldi	r26, 0x37	; 55
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e7 e3       	ldi	r30, 0x37	; 55
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	48 2f       	mov	r20, r24
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	02 2e       	mov	r0, r18
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <MDIO_voidSetPinDirection+0x19a>
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	0a 94       	dec	r0
    1352:	e2 f7       	brpl	.-8      	; 0x134c <MDIO_voidSetPinDirection+0x196>
    1354:	84 2b       	or	r24, r20
    1356:	8c 93       	st	X, r24
    1358:	27 c0       	rjmp	.+78     	; 0x13a8 <MDIO_voidSetPinDirection+0x1f2>
		case DIO_PORTC : SET_BIT(DDRC,copy_u8Pin);break;
    135a:	a4 e3       	ldi	r26, 0x34	; 52
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e4 e3       	ldi	r30, 0x34	; 52
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	48 2f       	mov	r20, r24
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	02 2e       	mov	r0, r18
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <MDIO_voidSetPinDirection+0x1c2>
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	0a 94       	dec	r0
    137a:	e2 f7       	brpl	.-8      	; 0x1374 <MDIO_voidSetPinDirection+0x1be>
    137c:	84 2b       	or	r24, r20
    137e:	8c 93       	st	X, r24
    1380:	13 c0       	rjmp	.+38     	; 0x13a8 <MDIO_voidSetPinDirection+0x1f2>
		case DIO_PORTD : SET_BIT(DDRD,copy_u8Pin);break;
    1382:	a1 e3       	ldi	r26, 0x31	; 49
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e1 e3       	ldi	r30, 0x31	; 49
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	48 2f       	mov	r20, r24
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	02 2e       	mov	r0, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <MDIO_voidSetPinDirection+0x1ea>
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	0a 94       	dec	r0
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <MDIO_voidSetPinDirection+0x1e6>
    13a4:	84 2b       	or	r24, r20
    13a6:	8c 93       	st	X, r24

		}

	}

}
    13a8:	27 96       	adiw	r28, 0x07	; 7
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <MDIO_Error_State_tSetPinValue>:

Error_State_t MDIO_Error_State_tSetPinValue (u8 copy_u8Port , u8 copy_u8Pin , u8 copy_u8Mode )
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	28 97       	sbiw	r28, 0x08	; 8
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
    13ce:	8a 83       	std	Y+2, r24	; 0x02
    13d0:	6b 83       	std	Y+3, r22	; 0x03
    13d2:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t Error_State =Return_OK;
    13d4:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8Pin>7)
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	88 30       	cpi	r24, 0x08	; 8
    13da:	18 f0       	brcs	.+6      	; 0x13e2 <MDIO_Error_State_tSetPinValue+0x28>
	{
		Error_State =Return_NOK;
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	89 83       	std	Y+1, r24	; 0x01
    13e0:	ec c0       	rjmp	.+472    	; 0x15ba <MDIO_Error_State_tSetPinValue+0x200>
	}
	else
	{
		if(copy_u8Mode==DIO_LOW)
    13e2:	8c 81       	ldd	r24, Y+4	; 0x04
    13e4:	88 23       	and	r24, r24
    13e6:	09 f0       	breq	.+2      	; 0x13ea <MDIO_Error_State_tSetPinValue+0x30>
    13e8:	75 c0       	rjmp	.+234    	; 0x14d4 <MDIO_Error_State_tSetPinValue+0x11a>
		{
			switch(copy_u8Port)
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	38 87       	std	Y+8, r19	; 0x08
    13f2:	2f 83       	std	Y+7, r18	; 0x07
    13f4:	8f 81       	ldd	r24, Y+7	; 0x07
    13f6:	98 85       	ldd	r25, Y+8	; 0x08
    13f8:	82 30       	cpi	r24, 0x02	; 2
    13fa:	91 05       	cpc	r25, r1
    13fc:	61 f1       	breq	.+88     	; 0x1456 <MDIO_Error_State_tSetPinValue+0x9c>
    13fe:	2f 81       	ldd	r18, Y+7	; 0x07
    1400:	38 85       	ldd	r19, Y+8	; 0x08
    1402:	23 30       	cpi	r18, 0x03	; 3
    1404:	31 05       	cpc	r19, r1
    1406:	34 f4       	brge	.+12     	; 0x1414 <MDIO_Error_State_tSetPinValue+0x5a>
    1408:	8f 81       	ldd	r24, Y+7	; 0x07
    140a:	98 85       	ldd	r25, Y+8	; 0x08
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	91 05       	cpc	r25, r1
    1410:	69 f0       	breq	.+26     	; 0x142c <MDIO_Error_State_tSetPinValue+0x72>
    1412:	d3 c0       	rjmp	.+422    	; 0x15ba <MDIO_Error_State_tSetPinValue+0x200>
    1414:	2f 81       	ldd	r18, Y+7	; 0x07
    1416:	38 85       	ldd	r19, Y+8	; 0x08
    1418:	23 30       	cpi	r18, 0x03	; 3
    141a:	31 05       	cpc	r19, r1
    141c:	89 f1       	breq	.+98     	; 0x1480 <MDIO_Error_State_tSetPinValue+0xc6>
    141e:	8f 81       	ldd	r24, Y+7	; 0x07
    1420:	98 85       	ldd	r25, Y+8	; 0x08
    1422:	84 30       	cpi	r24, 0x04	; 4
    1424:	91 05       	cpc	r25, r1
    1426:	09 f4       	brne	.+2      	; 0x142a <MDIO_Error_State_tSetPinValue+0x70>
    1428:	40 c0       	rjmp	.+128    	; 0x14aa <MDIO_Error_State_tSetPinValue+0xf0>
    142a:	c7 c0       	rjmp	.+398    	; 0x15ba <MDIO_Error_State_tSetPinValue+0x200>
			{
			case DIO_PORTA : CLR_BIT(PORTA,copy_u8Pin);break;
    142c:	ab e3       	ldi	r26, 0x3B	; 59
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	eb e3       	ldi	r30, 0x3B	; 59
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	48 2f       	mov	r20, r24
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	02 2e       	mov	r0, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <MDIO_Error_State_tSetPinValue+0x90>
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	0a 94       	dec	r0
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <MDIO_Error_State_tSetPinValue+0x8c>
    144e:	80 95       	com	r24
    1450:	84 23       	and	r24, r20
    1452:	8c 93       	st	X, r24
    1454:	b2 c0       	rjmp	.+356    	; 0x15ba <MDIO_Error_State_tSetPinValue+0x200>
			case DIO_PORTB : CLR_BIT(PORTB,copy_u8Pin);break;
    1456:	a8 e3       	ldi	r26, 0x38	; 56
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e8 e3       	ldi	r30, 0x38	; 56
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	48 2f       	mov	r20, r24
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 2e       	mov	r0, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <MDIO_Error_State_tSetPinValue+0xba>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	0a 94       	dec	r0
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <MDIO_Error_State_tSetPinValue+0xb6>
    1478:	80 95       	com	r24
    147a:	84 23       	and	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	9d c0       	rjmp	.+314    	; 0x15ba <MDIO_Error_State_tSetPinValue+0x200>
			case DIO_PORTC : CLR_BIT(PORTC,copy_u8Pin);break;
    1480:	a5 e3       	ldi	r26, 0x35	; 53
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e5 e3       	ldi	r30, 0x35	; 53
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 2e       	mov	r0, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <MDIO_Error_State_tSetPinValue+0xe4>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	0a 94       	dec	r0
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <MDIO_Error_State_tSetPinValue+0xe0>
    14a2:	80 95       	com	r24
    14a4:	84 23       	and	r24, r20
    14a6:	8c 93       	st	X, r24
    14a8:	88 c0       	rjmp	.+272    	; 0x15ba <MDIO_Error_State_tSetPinValue+0x200>
			case DIO_PORTD : CLR_BIT(PORTD,copy_u8Pin);break;
    14aa:	a2 e3       	ldi	r26, 0x32	; 50
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e2 e3       	ldi	r30, 0x32	; 50
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 2e       	mov	r0, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <MDIO_Error_State_tSetPinValue+0x10e>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <MDIO_Error_State_tSetPinValue+0x10a>
    14cc:	80 95       	com	r24
    14ce:	84 23       	and	r24, r20
    14d0:	8c 93       	st	X, r24
    14d2:	73 c0       	rjmp	.+230    	; 0x15ba <MDIO_Error_State_tSetPinValue+0x200>
			default : break;

			}
		}
		else if (copy_u8Mode==DIO_HIGH)
    14d4:	8c 81       	ldd	r24, Y+4	; 0x04
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	09 f0       	breq	.+2      	; 0x14dc <MDIO_Error_State_tSetPinValue+0x122>
    14da:	6f c0       	rjmp	.+222    	; 0x15ba <MDIO_Error_State_tSetPinValue+0x200>
		{
			switch(copy_u8Port)
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	3e 83       	std	Y+6, r19	; 0x06
    14e4:	2d 83       	std	Y+5, r18	; 0x05
    14e6:	8d 81       	ldd	r24, Y+5	; 0x05
    14e8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ea:	82 30       	cpi	r24, 0x02	; 2
    14ec:	91 05       	cpc	r25, r1
    14ee:	51 f1       	breq	.+84     	; 0x1544 <MDIO_Error_State_tSetPinValue+0x18a>
    14f0:	2d 81       	ldd	r18, Y+5	; 0x05
    14f2:	3e 81       	ldd	r19, Y+6	; 0x06
    14f4:	23 30       	cpi	r18, 0x03	; 3
    14f6:	31 05       	cpc	r19, r1
    14f8:	34 f4       	brge	.+12     	; 0x1506 <MDIO_Error_State_tSetPinValue+0x14c>
    14fa:	8d 81       	ldd	r24, Y+5	; 0x05
    14fc:	9e 81       	ldd	r25, Y+6	; 0x06
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	91 05       	cpc	r25, r1
    1502:	61 f0       	breq	.+24     	; 0x151c <MDIO_Error_State_tSetPinValue+0x162>
    1504:	5a c0       	rjmp	.+180    	; 0x15ba <MDIO_Error_State_tSetPinValue+0x200>
    1506:	2d 81       	ldd	r18, Y+5	; 0x05
    1508:	3e 81       	ldd	r19, Y+6	; 0x06
    150a:	23 30       	cpi	r18, 0x03	; 3
    150c:	31 05       	cpc	r19, r1
    150e:	71 f1       	breq	.+92     	; 0x156c <MDIO_Error_State_tSetPinValue+0x1b2>
    1510:	8d 81       	ldd	r24, Y+5	; 0x05
    1512:	9e 81       	ldd	r25, Y+6	; 0x06
    1514:	84 30       	cpi	r24, 0x04	; 4
    1516:	91 05       	cpc	r25, r1
    1518:	e9 f1       	breq	.+122    	; 0x1594 <MDIO_Error_State_tSetPinValue+0x1da>
    151a:	4f c0       	rjmp	.+158    	; 0x15ba <MDIO_Error_State_tSetPinValue+0x200>
			{
			case DIO_PORTA : SET_BIT(PORTA,copy_u8Pin);break;
    151c:	ab e3       	ldi	r26, 0x3B	; 59
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	eb e3       	ldi	r30, 0x3B	; 59
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 2e       	mov	r0, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <MDIO_Error_State_tSetPinValue+0x180>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <MDIO_Error_State_tSetPinValue+0x17c>
    153e:	84 2b       	or	r24, r20
    1540:	8c 93       	st	X, r24
    1542:	3b c0       	rjmp	.+118    	; 0x15ba <MDIO_Error_State_tSetPinValue+0x200>
			case DIO_PORTB : SET_BIT(PORTB,copy_u8Pin);break;
    1544:	a8 e3       	ldi	r26, 0x38	; 56
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e8 e3       	ldi	r30, 0x38	; 56
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	48 2f       	mov	r20, r24
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	02 2e       	mov	r0, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <MDIO_Error_State_tSetPinValue+0x1a8>
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	0a 94       	dec	r0
    1564:	e2 f7       	brpl	.-8      	; 0x155e <MDIO_Error_State_tSetPinValue+0x1a4>
    1566:	84 2b       	or	r24, r20
    1568:	8c 93       	st	X, r24
    156a:	27 c0       	rjmp	.+78     	; 0x15ba <MDIO_Error_State_tSetPinValue+0x200>
			case DIO_PORTC : SET_BIT(PORTC,copy_u8Pin);break;
    156c:	a5 e3       	ldi	r26, 0x35	; 53
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e5 e3       	ldi	r30, 0x35	; 53
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	48 2f       	mov	r20, r24
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	02 2e       	mov	r0, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <MDIO_Error_State_tSetPinValue+0x1d0>
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	0a 94       	dec	r0
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <MDIO_Error_State_tSetPinValue+0x1cc>
    158e:	84 2b       	or	r24, r20
    1590:	8c 93       	st	X, r24
    1592:	13 c0       	rjmp	.+38     	; 0x15ba <MDIO_Error_State_tSetPinValue+0x200>
			case DIO_PORTD : SET_BIT(PORTD,copy_u8Pin);break;
    1594:	a2 e3       	ldi	r26, 0x32	; 50
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e2 e3       	ldi	r30, 0x32	; 50
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	48 2f       	mov	r20, r24
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	02 2e       	mov	r0, r18
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <MDIO_Error_State_tSetPinValue+0x1f8>
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	0a 94       	dec	r0
    15b4:	e2 f7       	brpl	.-8      	; 0x15ae <MDIO_Error_State_tSetPinValue+0x1f4>
    15b6:	84 2b       	or	r24, r20
    15b8:	8c 93       	st	X, r24

			}

		}
	}
	return Error_State;
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    15bc:	28 96       	adiw	r28, 0x08	; 8
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <MDIO_Error_State_tGetPinValue>:

Error_State_t MDIO_Error_State_tGetPinValue (u8 copy_u8Port , u8 copy_u8Pin , u8 *p_u8Value )
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	27 97       	sbiw	r28, 0x07	; 7
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	8a 83       	std	Y+2, r24	; 0x02
    15e4:	6b 83       	std	Y+3, r22	; 0x03
    15e6:	5d 83       	std	Y+5, r21	; 0x05
    15e8:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t Error_State =Return_OK;
    15ea:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8Pin>7)
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	88 30       	cpi	r24, 0x08	; 8
    15f0:	18 f0       	brcs	.+6      	; 0x15f8 <MDIO_Error_State_tGetPinValue+0x2a>
	{
		Error_State =Return_NOK;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	a1 c0       	rjmp	.+322    	; 0x173a <MDIO_Error_State_tGetPinValue+0x16c>
	}
	else
	{
		switch(copy_u8Port)
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	3f 83       	std	Y+7, r19	; 0x07
    1600:	2e 83       	std	Y+6, r18	; 0x06
    1602:	4e 81       	ldd	r20, Y+6	; 0x06
    1604:	5f 81       	ldd	r21, Y+7	; 0x07
    1606:	42 30       	cpi	r20, 0x02	; 2
    1608:	51 05       	cpc	r21, r1
    160a:	c1 f1       	breq	.+112    	; 0x167c <MDIO_Error_State_tGetPinValue+0xae>
    160c:	8e 81       	ldd	r24, Y+6	; 0x06
    160e:	9f 81       	ldd	r25, Y+7	; 0x07
    1610:	83 30       	cpi	r24, 0x03	; 3
    1612:	91 05       	cpc	r25, r1
    1614:	34 f4       	brge	.+12     	; 0x1622 <MDIO_Error_State_tGetPinValue+0x54>
    1616:	2e 81       	ldd	r18, Y+6	; 0x06
    1618:	3f 81       	ldd	r19, Y+7	; 0x07
    161a:	21 30       	cpi	r18, 0x01	; 1
    161c:	31 05       	cpc	r19, r1
    161e:	71 f0       	breq	.+28     	; 0x163c <MDIO_Error_State_tGetPinValue+0x6e>
    1620:	8c c0       	rjmp	.+280    	; 0x173a <MDIO_Error_State_tGetPinValue+0x16c>
    1622:	4e 81       	ldd	r20, Y+6	; 0x06
    1624:	5f 81       	ldd	r21, Y+7	; 0x07
    1626:	43 30       	cpi	r20, 0x03	; 3
    1628:	51 05       	cpc	r21, r1
    162a:	09 f4       	brne	.+2      	; 0x162e <MDIO_Error_State_tGetPinValue+0x60>
    162c:	47 c0       	rjmp	.+142    	; 0x16bc <MDIO_Error_State_tGetPinValue+0xee>
    162e:	8e 81       	ldd	r24, Y+6	; 0x06
    1630:	9f 81       	ldd	r25, Y+7	; 0x07
    1632:	84 30       	cpi	r24, 0x04	; 4
    1634:	91 05       	cpc	r25, r1
    1636:	09 f4       	brne	.+2      	; 0x163a <MDIO_Error_State_tGetPinValue+0x6c>
    1638:	61 c0       	rjmp	.+194    	; 0x16fc <MDIO_Error_State_tGetPinValue+0x12e>
    163a:	7f c0       	rjmp	.+254    	; 0x173a <MDIO_Error_State_tGetPinValue+0x16c>
		{
		case DIO_PORTA : *p_u8Value =GET_BIT(PINA,copy_u8Pin);break;
    163c:	e9 e3       	ldi	r30, 0x39	; 57
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	48 2f       	mov	r20, r24
    1644:	50 e0       	ldi	r21, 0x00	; 0
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <MDIO_Error_State_tGetPinValue+0x88>
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	2a 95       	dec	r18
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <MDIO_Error_State_tGetPinValue+0x84>
    165a:	9a 01       	movw	r18, r20
    165c:	28 23       	and	r18, r24
    165e:	39 23       	and	r19, r25
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	88 2f       	mov	r24, r24
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	a9 01       	movw	r20, r18
    1668:	02 c0       	rjmp	.+4      	; 0x166e <MDIO_Error_State_tGetPinValue+0xa0>
    166a:	55 95       	asr	r21
    166c:	47 95       	ror	r20
    166e:	8a 95       	dec	r24
    1670:	e2 f7       	brpl	.-8      	; 0x166a <MDIO_Error_State_tGetPinValue+0x9c>
    1672:	ca 01       	movw	r24, r20
    1674:	ec 81       	ldd	r30, Y+4	; 0x04
    1676:	fd 81       	ldd	r31, Y+5	; 0x05
    1678:	80 83       	st	Z, r24
    167a:	5f c0       	rjmp	.+190    	; 0x173a <MDIO_Error_State_tGetPinValue+0x16c>
		case DIO_PORTB : *p_u8Value =GET_BIT(PINB,copy_u8Pin);break;
    167c:	e6 e3       	ldi	r30, 0x36	; 54
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	48 2f       	mov	r20, r24
    1684:	50 e0       	ldi	r21, 0x00	; 0
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <MDIO_Error_State_tGetPinValue+0xc8>
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	2a 95       	dec	r18
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <MDIO_Error_State_tGetPinValue+0xc4>
    169a:	9a 01       	movw	r18, r20
    169c:	28 23       	and	r18, r24
    169e:	39 23       	and	r19, r25
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	88 2f       	mov	r24, r24
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	a9 01       	movw	r20, r18
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <MDIO_Error_State_tGetPinValue+0xe0>
    16aa:	55 95       	asr	r21
    16ac:	47 95       	ror	r20
    16ae:	8a 95       	dec	r24
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <MDIO_Error_State_tGetPinValue+0xdc>
    16b2:	ca 01       	movw	r24, r20
    16b4:	ec 81       	ldd	r30, Y+4	; 0x04
    16b6:	fd 81       	ldd	r31, Y+5	; 0x05
    16b8:	80 83       	st	Z, r24
    16ba:	3f c0       	rjmp	.+126    	; 0x173a <MDIO_Error_State_tGetPinValue+0x16c>
		case DIO_PORTC : *p_u8Value =GET_BIT(PINC,copy_u8Pin);break;
    16bc:	e3 e3       	ldi	r30, 0x33	; 51
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	48 2f       	mov	r20, r24
    16c4:	50 e0       	ldi	r21, 0x00	; 0
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <MDIO_Error_State_tGetPinValue+0x108>
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	2a 95       	dec	r18
    16d8:	e2 f7       	brpl	.-8      	; 0x16d2 <MDIO_Error_State_tGetPinValue+0x104>
    16da:	9a 01       	movw	r18, r20
    16dc:	28 23       	and	r18, r24
    16de:	39 23       	and	r19, r25
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	88 2f       	mov	r24, r24
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	a9 01       	movw	r20, r18
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <MDIO_Error_State_tGetPinValue+0x120>
    16ea:	55 95       	asr	r21
    16ec:	47 95       	ror	r20
    16ee:	8a 95       	dec	r24
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <MDIO_Error_State_tGetPinValue+0x11c>
    16f2:	ca 01       	movw	r24, r20
    16f4:	ec 81       	ldd	r30, Y+4	; 0x04
    16f6:	fd 81       	ldd	r31, Y+5	; 0x05
    16f8:	80 83       	st	Z, r24
    16fa:	1f c0       	rjmp	.+62     	; 0x173a <MDIO_Error_State_tGetPinValue+0x16c>
		case DIO_PORTD : *p_u8Value =GET_BIT(PIND,copy_u8Pin);break;
    16fc:	e0 e3       	ldi	r30, 0x30	; 48
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	48 2f       	mov	r20, r24
    1704:	50 e0       	ldi	r21, 0x00	; 0
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <MDIO_Error_State_tGetPinValue+0x148>
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	2a 95       	dec	r18
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <MDIO_Error_State_tGetPinValue+0x144>
    171a:	9a 01       	movw	r18, r20
    171c:	28 23       	and	r18, r24
    171e:	39 23       	and	r19, r25
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	88 2f       	mov	r24, r24
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	a9 01       	movw	r20, r18
    1728:	02 c0       	rjmp	.+4      	; 0x172e <MDIO_Error_State_tGetPinValue+0x160>
    172a:	55 95       	asr	r21
    172c:	47 95       	ror	r20
    172e:	8a 95       	dec	r24
    1730:	e2 f7       	brpl	.-8      	; 0x172a <MDIO_Error_State_tGetPinValue+0x15c>
    1732:	ca 01       	movw	r24, r20
    1734:	ec 81       	ldd	r30, Y+4	; 0x04
    1736:	fd 81       	ldd	r31, Y+5	; 0x05
    1738:	80 83       	st	Z, r24
		default : break;
		}
	}
	return Error_State;
    173a:	89 81       	ldd	r24, Y+1	; 0x01

}
    173c:	27 96       	adiw	r28, 0x07	; 7
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	f8 94       	cli
    1742:	de bf       	out	0x3e, r29	; 62
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	cd bf       	out	0x3d, r28	; 61
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	08 95       	ret

0000174e <MDIO_EnumSetPortValue>:

Error_State_t MDIO_EnumSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	00 d0       	rcall	.+0      	; 0x1754 <MDIO_EnumSetPortValue+0x6>
    1754:	00 d0       	rcall	.+0      	; 0x1756 <MDIO_EnumSetPortValue+0x8>
    1756:	0f 92       	push	r0
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	8a 83       	std	Y+2, r24	; 0x02
    175e:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t Error_State = Return_OK;
    1760:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port>PIN7)
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	88 30       	cpi	r24, 0x08	; 8
    1766:	18 f0       	brcs	.+6      	; 0x176e <MDIO_EnumSetPortValue+0x20>
	{
		Error_State = Return_NOK;
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	89 83       	std	Y+1, r24	; 0x01
    176c:	36 c0       	rjmp	.+108    	; 0x17da <MDIO_EnumSetPortValue+0x8c>
	}
	else
	{
		switch(Copy_u8Port)
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	3d 83       	std	Y+5, r19	; 0x05
    1776:	2c 83       	std	Y+4, r18	; 0x04
    1778:	8c 81       	ldd	r24, Y+4	; 0x04
    177a:	9d 81       	ldd	r25, Y+5	; 0x05
    177c:	82 30       	cpi	r24, 0x02	; 2
    177e:	91 05       	cpc	r25, r1
    1780:	d9 f0       	breq	.+54     	; 0x17b8 <MDIO_EnumSetPortValue+0x6a>
    1782:	2c 81       	ldd	r18, Y+4	; 0x04
    1784:	3d 81       	ldd	r19, Y+5	; 0x05
    1786:	23 30       	cpi	r18, 0x03	; 3
    1788:	31 05       	cpc	r19, r1
    178a:	34 f4       	brge	.+12     	; 0x1798 <MDIO_EnumSetPortValue+0x4a>
    178c:	8c 81       	ldd	r24, Y+4	; 0x04
    178e:	9d 81       	ldd	r25, Y+5	; 0x05
    1790:	81 30       	cpi	r24, 0x01	; 1
    1792:	91 05       	cpc	r25, r1
    1794:	61 f0       	breq	.+24     	; 0x17ae <MDIO_EnumSetPortValue+0x60>
    1796:	1f c0       	rjmp	.+62     	; 0x17d6 <MDIO_EnumSetPortValue+0x88>
    1798:	2c 81       	ldd	r18, Y+4	; 0x04
    179a:	3d 81       	ldd	r19, Y+5	; 0x05
    179c:	23 30       	cpi	r18, 0x03	; 3
    179e:	31 05       	cpc	r19, r1
    17a0:	81 f0       	breq	.+32     	; 0x17c2 <MDIO_EnumSetPortValue+0x74>
    17a2:	8c 81       	ldd	r24, Y+4	; 0x04
    17a4:	9d 81       	ldd	r25, Y+5	; 0x05
    17a6:	84 30       	cpi	r24, 0x04	; 4
    17a8:	91 05       	cpc	r25, r1
    17aa:	81 f0       	breq	.+32     	; 0x17cc <MDIO_EnumSetPortValue+0x7e>
    17ac:	14 c0       	rjmp	.+40     	; 0x17d6 <MDIO_EnumSetPortValue+0x88>
		{
		case DIO_PORTA: PORTA=Copy_u8Value; break;
    17ae:	eb e3       	ldi	r30, 0x3B	; 59
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	80 83       	st	Z, r24
    17b6:	11 c0       	rjmp	.+34     	; 0x17da <MDIO_EnumSetPortValue+0x8c>
		case DIO_PORTB: PORTB=Copy_u8Value; break;
    17b8:	e8 e3       	ldi	r30, 0x38	; 56
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	80 83       	st	Z, r24
    17c0:	0c c0       	rjmp	.+24     	; 0x17da <MDIO_EnumSetPortValue+0x8c>
		case DIO_PORTC: PORTC=Copy_u8Value; break;
    17c2:	e5 e3       	ldi	r30, 0x35	; 53
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	80 83       	st	Z, r24
    17ca:	07 c0       	rjmp	.+14     	; 0x17da <MDIO_EnumSetPortValue+0x8c>
		case DIO_PORTD: PORTD=Copy_u8Value; break;
    17cc:	e2 e3       	ldi	r30, 0x32	; 50
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	80 83       	st	Z, r24
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <MDIO_EnumSetPortValue+0x8c>
		default: Error_State = Return_NOK; break;
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return Error_State;
    17da:	89 81       	ldd	r24, Y+1	; 0x01
}
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <MDIO_EnumGetPortValue>:


Error_State_t MDIO_EnumGetPortValue(u8 Copy_u8Port, u8* P_u8Value)
{
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <MDIO_EnumGetPortValue+0x6>
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <MDIO_EnumGetPortValue+0x8>
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <MDIO_EnumGetPortValue+0xa>
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	8a 83       	std	Y+2, r24	; 0x02
    17fc:	7c 83       	std	Y+4, r23	; 0x04
    17fe:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t Error_State = Return_OK;
    1800:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port>PIN7)
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	88 30       	cpi	r24, 0x08	; 8
    1806:	18 f0       	brcs	.+6      	; 0x180e <MDIO_EnumGetPortValue+0x22>
	{
		Error_State = Return_NOK;
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	3e c0       	rjmp	.+124    	; 0x188a <MDIO_EnumGetPortValue+0x9e>
	}
	else
	{
		switch(Copy_u8Port)
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	3e 83       	std	Y+6, r19	; 0x06
    1816:	2d 83       	std	Y+5, r18	; 0x05
    1818:	8d 81       	ldd	r24, Y+5	; 0x05
    181a:	9e 81       	ldd	r25, Y+6	; 0x06
    181c:	82 30       	cpi	r24, 0x02	; 2
    181e:	91 05       	cpc	r25, r1
    1820:	e9 f0       	breq	.+58     	; 0x185c <MDIO_EnumGetPortValue+0x70>
    1822:	2d 81       	ldd	r18, Y+5	; 0x05
    1824:	3e 81       	ldd	r19, Y+6	; 0x06
    1826:	23 30       	cpi	r18, 0x03	; 3
    1828:	31 05       	cpc	r19, r1
    182a:	34 f4       	brge	.+12     	; 0x1838 <MDIO_EnumGetPortValue+0x4c>
    182c:	8d 81       	ldd	r24, Y+5	; 0x05
    182e:	9e 81       	ldd	r25, Y+6	; 0x06
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	91 05       	cpc	r25, r1
    1834:	61 f0       	breq	.+24     	; 0x184e <MDIO_EnumGetPortValue+0x62>
    1836:	27 c0       	rjmp	.+78     	; 0x1886 <MDIO_EnumGetPortValue+0x9a>
    1838:	2d 81       	ldd	r18, Y+5	; 0x05
    183a:	3e 81       	ldd	r19, Y+6	; 0x06
    183c:	23 30       	cpi	r18, 0x03	; 3
    183e:	31 05       	cpc	r19, r1
    1840:	a1 f0       	breq	.+40     	; 0x186a <MDIO_EnumGetPortValue+0x7e>
    1842:	8d 81       	ldd	r24, Y+5	; 0x05
    1844:	9e 81       	ldd	r25, Y+6	; 0x06
    1846:	84 30       	cpi	r24, 0x04	; 4
    1848:	91 05       	cpc	r25, r1
    184a:	b1 f0       	breq	.+44     	; 0x1878 <MDIO_EnumGetPortValue+0x8c>
    184c:	1c c0       	rjmp	.+56     	; 0x1886 <MDIO_EnumGetPortValue+0x9a>
		{
		case DIO_PORTA: *P_u8Value=PINA; break;
    184e:	e9 e3       	ldi	r30, 0x39	; 57
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	eb 81       	ldd	r30, Y+3	; 0x03
    1856:	fc 81       	ldd	r31, Y+4	; 0x04
    1858:	80 83       	st	Z, r24
    185a:	17 c0       	rjmp	.+46     	; 0x188a <MDIO_EnumGetPortValue+0x9e>
		case DIO_PORTB: *P_u8Value=PINB; break;
    185c:	e6 e3       	ldi	r30, 0x36	; 54
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	eb 81       	ldd	r30, Y+3	; 0x03
    1864:	fc 81       	ldd	r31, Y+4	; 0x04
    1866:	80 83       	st	Z, r24
    1868:	10 c0       	rjmp	.+32     	; 0x188a <MDIO_EnumGetPortValue+0x9e>
		case DIO_PORTC: *P_u8Value=PINC; break;
    186a:	e3 e3       	ldi	r30, 0x33	; 51
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	eb 81       	ldd	r30, Y+3	; 0x03
    1872:	fc 81       	ldd	r31, Y+4	; 0x04
    1874:	80 83       	st	Z, r24
    1876:	09 c0       	rjmp	.+18     	; 0x188a <MDIO_EnumGetPortValue+0x9e>
		case DIO_PORTD: *P_u8Value=PIND; break;
    1878:	e0 e3       	ldi	r30, 0x30	; 48
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	eb 81       	ldd	r30, Y+3	; 0x03
    1880:	fc 81       	ldd	r31, Y+4	; 0x04
    1882:	80 83       	st	Z, r24
    1884:	02 c0       	rjmp	.+4      	; 0x188a <MDIO_EnumGetPortValue+0x9e>
		default: Error_State = Return_NOK; break;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return Error_State;
    188a:	89 81       	ldd	r24, Y+1	; 0x01
}
    188c:	26 96       	adiw	r28, 0x06	; 6
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <MDIO_Error_state_tTogglePinValue>:

Error_State_t MDIO_Error_state_tTogglePinValue(u8 copy_u8port,u8 copy_u8pin)
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <MDIO_Error_state_tTogglePinValue+0x6>
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <MDIO_Error_state_tTogglePinValue+0x8>
    18a6:	0f 92       	push	r0
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	8a 83       	std	Y+2, r24	; 0x02
    18ae:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t Error_state=Return_OK;
    18b0:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8pin>PIN7)
    18b2:	8b 81       	ldd	r24, Y+3	; 0x03
    18b4:	88 30       	cpi	r24, 0x08	; 8
    18b6:	10 f0       	brcs	.+4      	; 0x18bc <MDIO_Error_state_tTogglePinValue+0x1e>
	{
		Error_state=Return_NOK;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	89 83       	std	Y+1, r24	; 0x01
	}
	switch (copy_u8port)
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	3d 83       	std	Y+5, r19	; 0x05
    18c4:	2c 83       	std	Y+4, r18	; 0x04
    18c6:	8c 81       	ldd	r24, Y+4	; 0x04
    18c8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ca:	82 30       	cpi	r24, 0x02	; 2
    18cc:	91 05       	cpc	r25, r1
    18ce:	51 f1       	breq	.+84     	; 0x1924 <MDIO_Error_state_tTogglePinValue+0x86>
    18d0:	2c 81       	ldd	r18, Y+4	; 0x04
    18d2:	3d 81       	ldd	r19, Y+5	; 0x05
    18d4:	23 30       	cpi	r18, 0x03	; 3
    18d6:	31 05       	cpc	r19, r1
    18d8:	34 f4       	brge	.+12     	; 0x18e6 <MDIO_Error_state_tTogglePinValue+0x48>
    18da:	8c 81       	ldd	r24, Y+4	; 0x04
    18dc:	9d 81       	ldd	r25, Y+5	; 0x05
    18de:	81 30       	cpi	r24, 0x01	; 1
    18e0:	91 05       	cpc	r25, r1
    18e2:	61 f0       	breq	.+24     	; 0x18fc <MDIO_Error_state_tTogglePinValue+0x5e>
    18e4:	5b c0       	rjmp	.+182    	; 0x199c <MDIO_Error_state_tTogglePinValue+0xfe>
    18e6:	2c 81       	ldd	r18, Y+4	; 0x04
    18e8:	3d 81       	ldd	r19, Y+5	; 0x05
    18ea:	23 30       	cpi	r18, 0x03	; 3
    18ec:	31 05       	cpc	r19, r1
    18ee:	71 f1       	breq	.+92     	; 0x194c <MDIO_Error_state_tTogglePinValue+0xae>
    18f0:	8c 81       	ldd	r24, Y+4	; 0x04
    18f2:	9d 81       	ldd	r25, Y+5	; 0x05
    18f4:	84 30       	cpi	r24, 0x04	; 4
    18f6:	91 05       	cpc	r25, r1
    18f8:	e9 f1       	breq	.+122    	; 0x1974 <MDIO_Error_state_tTogglePinValue+0xd6>
    18fa:	50 c0       	rjmp	.+160    	; 0x199c <MDIO_Error_state_tTogglePinValue+0xfe>
	{
	case DIO_PORTA : TOG_BIT(PORTA, copy_u8pin); break;
    18fc:	ab e3       	ldi	r26, 0x3B	; 59
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	eb e3       	ldi	r30, 0x3B	; 59
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	48 2f       	mov	r20, r24
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	28 2f       	mov	r18, r24
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	02 2e       	mov	r0, r18
    1914:	02 c0       	rjmp	.+4      	; 0x191a <MDIO_Error_state_tTogglePinValue+0x7c>
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	0a 94       	dec	r0
    191c:	e2 f7       	brpl	.-8      	; 0x1916 <MDIO_Error_state_tTogglePinValue+0x78>
    191e:	84 27       	eor	r24, r20
    1920:	8c 93       	st	X, r24
    1922:	3e c0       	rjmp	.+124    	; 0x19a0 <MDIO_Error_state_tTogglePinValue+0x102>
	case DIO_PORTB : TOG_BIT(PORTB, copy_u8pin); break;
    1924:	a8 e3       	ldi	r26, 0x38	; 56
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e8 e3       	ldi	r30, 0x38	; 56
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	48 2f       	mov	r20, r24
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	28 2f       	mov	r18, r24
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	02 2e       	mov	r0, r18
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <MDIO_Error_state_tTogglePinValue+0xa4>
    193e:	88 0f       	add	r24, r24
    1940:	99 1f       	adc	r25, r25
    1942:	0a 94       	dec	r0
    1944:	e2 f7       	brpl	.-8      	; 0x193e <MDIO_Error_state_tTogglePinValue+0xa0>
    1946:	84 27       	eor	r24, r20
    1948:	8c 93       	st	X, r24
    194a:	2a c0       	rjmp	.+84     	; 0x19a0 <MDIO_Error_state_tTogglePinValue+0x102>
	case DIO_PORTC : TOG_BIT(PORTC, copy_u8pin); break;
    194c:	a5 e3       	ldi	r26, 0x35	; 53
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	e5 e3       	ldi	r30, 0x35	; 53
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	48 2f       	mov	r20, r24
    1958:	8b 81       	ldd	r24, Y+3	; 0x03
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	02 2e       	mov	r0, r18
    1964:	02 c0       	rjmp	.+4      	; 0x196a <MDIO_Error_state_tTogglePinValue+0xcc>
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	0a 94       	dec	r0
    196c:	e2 f7       	brpl	.-8      	; 0x1966 <MDIO_Error_state_tTogglePinValue+0xc8>
    196e:	84 27       	eor	r24, r20
    1970:	8c 93       	st	X, r24
    1972:	16 c0       	rjmp	.+44     	; 0x19a0 <MDIO_Error_state_tTogglePinValue+0x102>
	case DIO_PORTD : TOG_BIT(PORTD, copy_u8pin); break;
    1974:	a2 e3       	ldi	r26, 0x32	; 50
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e2 e3       	ldi	r30, 0x32	; 50
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	48 2f       	mov	r20, r24
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	02 2e       	mov	r0, r18
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <MDIO_Error_state_tTogglePinValue+0xf4>
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	0a 94       	dec	r0
    1994:	e2 f7       	brpl	.-8      	; 0x198e <MDIO_Error_state_tTogglePinValue+0xf0>
    1996:	84 27       	eor	r24, r20
    1998:	8c 93       	st	X, r24
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <MDIO_Error_state_tTogglePinValue+0x102>
	default:  Error_state=Return_NOK; break;
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_state;
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <MGIE_voidEnable>:
#include "MGIE_interface.h"
#include "MGIE_registers.h"


void MGIE_voidEnable(void)
{
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    19ba:	af e5       	ldi	r26, 0x5F	; 95
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	ef e5       	ldi	r30, 0x5F	; 95
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	80 68       	ori	r24, 0x80	; 128
    19c6:	8c 93       	st	X, r24
}
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	08 95       	ret

000019ce <MGIE_voidDisable>:
void MGIE_voidDisable(void)
{
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    19d6:	af e5       	ldi	r26, 0x5F	; 95
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	ef e5       	ldi	r30, 0x5F	; 95
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	8f 77       	andi	r24, 0x7F	; 127
    19e2:	8c 93       	st	X, r24
}
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <MTIMER0_voidInit>:

void(*Timer0_pf_OverFLow)(void)=NULL;
void(*Timer0_pf_Compare)(void)=NULL;

void MTIMER0_voidInit (void)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
	OCR0=COMPARE_MATCH_VALUE;
	/* Enable ctc ISR */
	SET_BIT(TIMSK , TIMSK_OCIE0);
#elif TIMER0_MODE == TIMER0_FAST_PWM
	/*selecting  wave generation mode as fast pwm mode */
	SET_BIT(TCCR0,TCCR0_WGM00);
    19f2:	a3 e5       	ldi	r26, 0x53	; 83
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e3 e5       	ldi	r30, 0x53	; 83
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	80 64       	ori	r24, 0x40	; 64
    19fe:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    1a00:	a3 e5       	ldi	r26, 0x53	; 83
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	e3 e5       	ldi	r30, 0x53	; 83
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	88 60       	ori	r24, 0x08	; 8
    1a0c:	8c 93       	st	X, r24

	// select non inverting mode
	CLR_BIT(TCCR0,TCCR0_COM00);
    1a0e:	a3 e5       	ldi	r26, 0x53	; 83
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e3 e5       	ldi	r30, 0x53	; 83
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	8f 7e       	andi	r24, 0xEF	; 239
    1a1a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_COM01);
    1a1c:	a3 e5       	ldi	r26, 0x53	; 83
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e3 e5       	ldi	r30, 0x53	; 83
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	80 62       	ori	r24, 0x20	; 32
    1a28:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS00);
		CLR_BIT(TCCR0,TCCR0_CS01);
		CLR_BIT(TCCR0,TCCR0_CS02);

	#elif  TIMER0_PRESCALER==TIMER0_8_PRESCALER
		CLR_BIT(TCCR0,TCCR0_CS00);
    1a2a:	a3 e5       	ldi	r26, 0x53	; 83
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e3 e5       	ldi	r30, 0x53	; 83
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	8e 7f       	andi	r24, 0xFE	; 254
    1a36:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS01);
    1a38:	a3 e5       	ldi	r26, 0x53	; 83
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e3 e5       	ldi	r30, 0x53	; 83
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	82 60       	ori	r24, 0x02	; 2
    1a44:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS02);
    1a46:	a3 e5       	ldi	r26, 0x53	; 83
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e3 e5       	ldi	r30, 0x53	; 83
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	8b 7f       	andi	r24, 0xFB	; 251
    1a52:	8c 93       	st	X, r24

	#else
	#error "TIMRT0 Invalid Prescaler"

	#endif
}
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	08 95       	ret

00001a5a <MTIMER0_voidEnable>:

void MTIMER0_voidEnable(void)
{
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
	/* SELECT TIMER0 PRESCALLER DIVISION BY 8*/
		CLR_BIT(TCCR0,TCCR0_CS00);
    1a62:	a3 e5       	ldi	r26, 0x53	; 83
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e3 e5       	ldi	r30, 0x53	; 83
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	8e 7f       	andi	r24, 0xFE	; 254
    1a6e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS01);
    1a70:	a3 e5       	ldi	r26, 0x53	; 83
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e3 e5       	ldi	r30, 0x53	; 83
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	82 60       	ori	r24, 0x02	; 2
    1a7c:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS02);
    1a7e:	a3 e5       	ldi	r26, 0x53	; 83
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e3 e5       	ldi	r30, 0x53	; 83
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	8b 7f       	andi	r24, 0xFB	; 251
    1a8a:	8c 93       	st	X, r24

}
    1a8c:	cf 91       	pop	r28
    1a8e:	df 91       	pop	r29
    1a90:	08 95       	ret

00001a92 <MTIMER0_voidDisable>:

void MTIMER0_voidDisable(void)
{
    1a92:	df 93       	push	r29
    1a94:	cf 93       	push	r28
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
	/* NO CLK SOURCE */
	CLR_BIT(TCCR0,TCCR0_CS00);
    1a9a:	a3 e5       	ldi	r26, 0x53	; 83
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e3 e5       	ldi	r30, 0x53	; 83
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	8e 7f       	andi	r24, 0xFE	; 254
    1aa6:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
    1aa8:	a3 e5       	ldi	r26, 0x53	; 83
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e3 e5       	ldi	r30, 0x53	; 83
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	8d 7f       	andi	r24, 0xFD	; 253
    1ab4:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    1ab6:	a3 e5       	ldi	r26, 0x53	; 83
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e3 e5       	ldi	r30, 0x53	; 83
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	8b 7f       	andi	r24, 0xFB	; 251
    1ac2:	8c 93       	st	X, r24

}
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	08 95       	ret

00001aca <MTIMER0_voidSetPreload>:
void MTIMER0_voidSetPreload (u8 copy_u8Preload)
{
    1aca:	df 93       	push	r29
    1acc:	cf 93       	push	r28
    1ace:	0f 92       	push	r0
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
    1ad4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=copy_u8Preload;
    1ad6:	e2 e5       	ldi	r30, 0x52	; 82
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	80 83       	st	Z, r24
}
    1ade:	0f 90       	pop	r0
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <MTIMER0_voidSetDutyCycle>:

void MTIMER0_voidSetDutyCycle(u8 Copy_u8Dutycycle){
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	0f 92       	push	r0
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
    1af0:	89 83       	std	Y+1, r24	; 0x01
	OCR0 =Copy_u8Dutycycle ;
    1af2:	ec e5       	ldi	r30, 0x5C	; 92
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	80 83       	st	Z, r24
}
    1afa:	0f 90       	pop	r0
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	08 95       	ret

00001b02 <MTIMER1_voidInit>:

void MTIMER1_voidInit (Timer1Modes_t copy_Timer1Mode,Top_t copy_Timer1TopMode,Prescaler_t copy_PrescalerValue)
{
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	29 97       	sbiw	r28, 0x09	; 9
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	de bf       	out	0x3e, r29	; 62
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	cd bf       	out	0x3d, r28	; 61
    1b16:	89 83       	std	Y+1, r24	; 0x01
    1b18:	6a 83       	std	Y+2, r22	; 0x02
    1b1a:	4b 83       	std	Y+3, r20	; 0x03
	switch(copy_Timer1Mode)
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	39 87       	std	Y+9, r19	; 0x09
    1b24:	28 87       	std	Y+8, r18	; 0x08
    1b26:	88 85       	ldd	r24, Y+8	; 0x08
    1b28:	99 85       	ldd	r25, Y+9	; 0x09
    1b2a:	82 30       	cpi	r24, 0x02	; 2
    1b2c:	91 05       	cpc	r25, r1
    1b2e:	09 f4       	brne	.+2      	; 0x1b32 <MTIMER1_voidInit+0x30>
    1b30:	5c c0       	rjmp	.+184    	; 0x1bea <MTIMER1_voidInit+0xe8>
    1b32:	28 85       	ldd	r18, Y+8	; 0x08
    1b34:	39 85       	ldd	r19, Y+9	; 0x09
    1b36:	23 30       	cpi	r18, 0x03	; 3
    1b38:	31 05       	cpc	r19, r1
    1b3a:	54 f4       	brge	.+20     	; 0x1b50 <MTIMER1_voidInit+0x4e>
    1b3c:	88 85       	ldd	r24, Y+8	; 0x08
    1b3e:	99 85       	ldd	r25, Y+9	; 0x09
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	c9 f0       	breq	.+50     	; 0x1b76 <MTIMER1_voidInit+0x74>
    1b44:	28 85       	ldd	r18, Y+8	; 0x08
    1b46:	39 85       	ldd	r19, Y+9	; 0x09
    1b48:	21 30       	cpi	r18, 0x01	; 1
    1b4a:	31 05       	cpc	r19, r1
    1b4c:	89 f1       	breq	.+98     	; 0x1bb0 <MTIMER1_voidInit+0xae>
    1b4e:	c0 c0       	rjmp	.+384    	; 0x1cd0 <MTIMER1_voidInit+0x1ce>
    1b50:	88 85       	ldd	r24, Y+8	; 0x08
    1b52:	99 85       	ldd	r25, Y+9	; 0x09
    1b54:	84 30       	cpi	r24, 0x04	; 4
    1b56:	91 05       	cpc	r25, r1
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <MTIMER1_voidInit+0x5a>
    1b5a:	81 c0       	rjmp	.+258    	; 0x1c5e <MTIMER1_voidInit+0x15c>
    1b5c:	28 85       	ldd	r18, Y+8	; 0x08
    1b5e:	39 85       	ldd	r19, Y+9	; 0x09
    1b60:	24 30       	cpi	r18, 0x04	; 4
    1b62:	31 05       	cpc	r19, r1
    1b64:	0c f4       	brge	.+2      	; 0x1b68 <MTIMER1_voidInit+0x66>
    1b66:	5e c0       	rjmp	.+188    	; 0x1c24 <MTIMER1_voidInit+0x122>
    1b68:	88 85       	ldd	r24, Y+8	; 0x08
    1b6a:	99 85       	ldd	r25, Y+9	; 0x09
    1b6c:	85 30       	cpi	r24, 0x05	; 5
    1b6e:	91 05       	cpc	r25, r1
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <MTIMER1_voidInit+0x72>
    1b72:	92 c0       	rjmp	.+292    	; 0x1c98 <MTIMER1_voidInit+0x196>
    1b74:	ad c0       	rjmp	.+346    	; 0x1cd0 <MTIMER1_voidInit+0x1ce>
	{
	case NORMAL_MODE:CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    1b76:	af e4       	ldi	r26, 0x4F	; 79
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	ef e4       	ldi	r30, 0x4F	; 79
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	8f 7b       	andi	r24, 0xBF	; 191
    1b82:	8c 93       	st	X, r24
	                 CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    1b84:	af e4       	ldi	r26, 0x4F	; 79
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	ef e4       	ldi	r30, 0x4F	; 79
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	8f 7e       	andi	r24, 0xEF	; 239
    1b90:	8c 93       	st	X, r24
	                 CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    1b92:	af e4       	ldi	r26, 0x4F	; 79
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	ef e4       	ldi	r30, 0x4F	; 79
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	8f 77       	andi	r24, 0x7F	; 127
    1b9e:	8c 93       	st	X, r24
	                 CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    1ba0:	af e4       	ldi	r26, 0x4F	; 79
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	ef e4       	ldi	r30, 0x4F	; 79
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	8f 7d       	andi	r24, 0xDF	; 223
    1bac:	8c 93       	st	X, r24
    1bae:	90 c0       	rjmp	.+288    	; 0x1cd0 <MTIMER1_voidInit+0x1ce>
	                 break;
	case CTC_TOGGLE:CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    1bb0:	af e4       	ldi	r26, 0x4F	; 79
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	ef e4       	ldi	r30, 0x4F	; 79
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	8f 7b       	andi	r24, 0xBF	; 191
    1bbc:	8c 93       	st	X, r24
                    SET_BIT(TCCR1A,TCCR1A_COM1B0);
    1bbe:	af e4       	ldi	r26, 0x4F	; 79
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	ef e4       	ldi	r30, 0x4F	; 79
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	80 61       	ori	r24, 0x10	; 16
    1bca:	8c 93       	st	X, r24
                    CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    1bcc:	af e4       	ldi	r26, 0x4F	; 79
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	ef e4       	ldi	r30, 0x4F	; 79
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	8f 77       	andi	r24, 0x7F	; 127
    1bd8:	8c 93       	st	X, r24
                    CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    1bda:	af e4       	ldi	r26, 0x4F	; 79
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	ef e4       	ldi	r30, 0x4F	; 79
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	8f 7d       	andi	r24, 0xDF	; 223
    1be6:	8c 93       	st	X, r24
    1be8:	73 c0       	rjmp	.+230    	; 0x1cd0 <MTIMER1_voidInit+0x1ce>
                    break;
	case CTC_SET :  SET_BIT(TCCR1A,TCCR1A_COM1A0);
    1bea:	af e4       	ldi	r26, 0x4F	; 79
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	ef e4       	ldi	r30, 0x4F	; 79
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	80 64       	ori	r24, 0x40	; 64
    1bf6:	8c 93       	st	X, r24
                    SET_BIT(TCCR1A,TCCR1A_COM1B0);
    1bf8:	af e4       	ldi	r26, 0x4F	; 79
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	ef e4       	ldi	r30, 0x4F	; 79
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	80 61       	ori	r24, 0x10	; 16
    1c04:	8c 93       	st	X, r24
                    SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1c06:	af e4       	ldi	r26, 0x4F	; 79
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	ef e4       	ldi	r30, 0x4F	; 79
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	80 68       	ori	r24, 0x80	; 128
    1c12:	8c 93       	st	X, r24
                    SET_BIT(TCCR1A,TCCR1A_COM1B1);
    1c14:	af e4       	ldi	r26, 0x4F	; 79
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	ef e4       	ldi	r30, 0x4F	; 79
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	80 62       	ori	r24, 0x20	; 32
    1c20:	8c 93       	st	X, r24
    1c22:	56 c0       	rjmp	.+172    	; 0x1cd0 <MTIMER1_voidInit+0x1ce>
                    break;
	case CTC_CLR :  CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    1c24:	af e4       	ldi	r26, 0x4F	; 79
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	ef e4       	ldi	r30, 0x4F	; 79
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	8f 7b       	andi	r24, 0xBF	; 191
    1c30:	8c 93       	st	X, r24
	                CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    1c32:	af e4       	ldi	r26, 0x4F	; 79
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	ef e4       	ldi	r30, 0x4F	; 79
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	8f 7e       	andi	r24, 0xEF	; 239
    1c3e:	8c 93       	st	X, r24
                    SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1c40:	af e4       	ldi	r26, 0x4F	; 79
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	ef e4       	ldi	r30, 0x4F	; 79
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	80 68       	ori	r24, 0x80	; 128
    1c4c:	8c 93       	st	X, r24
                    SET_BIT(TCCR1A,TCCR1A_COM1B1);
    1c4e:	af e4       	ldi	r26, 0x4F	; 79
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	ef e4       	ldi	r30, 0x4F	; 79
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	80 62       	ori	r24, 0x20	; 32
    1c5a:	8c 93       	st	X, r24
    1c5c:	39 c0       	rjmp	.+114    	; 0x1cd0 <MTIMER1_voidInit+0x1ce>
                    break;
	case FAST_PWM_NON_INVERTING :
		           CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    1c5e:	af e4       	ldi	r26, 0x4F	; 79
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	ef e4       	ldi	r30, 0x4F	; 79
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	8f 7b       	andi	r24, 0xBF	; 191
    1c6a:	8c 93       	st	X, r24
                   CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    1c6c:	af e4       	ldi	r26, 0x4F	; 79
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	ef e4       	ldi	r30, 0x4F	; 79
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	8f 7e       	andi	r24, 0xEF	; 239
    1c78:	8c 93       	st	X, r24
                   SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1c7a:	af e4       	ldi	r26, 0x4F	; 79
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	ef e4       	ldi	r30, 0x4F	; 79
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	80 68       	ori	r24, 0x80	; 128
    1c86:	8c 93       	st	X, r24
                   SET_BIT(TCCR1A,TCCR1A_COM1B1);
    1c88:	af e4       	ldi	r26, 0x4F	; 79
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	ef e4       	ldi	r30, 0x4F	; 79
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	80 62       	ori	r24, 0x20	; 32
    1c94:	8c 93       	st	X, r24
    1c96:	1c c0       	rjmp	.+56     	; 0x1cd0 <MTIMER1_voidInit+0x1ce>
                   break;
	case FAST_PWM_INVERTING :
		            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    1c98:	af e4       	ldi	r26, 0x4F	; 79
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	ef e4       	ldi	r30, 0x4F	; 79
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	80 64       	ori	r24, 0x40	; 64
    1ca4:	8c 93       	st	X, r24
			        SET_BIT(TCCR1A,TCCR1A_COM1B0);
    1ca6:	af e4       	ldi	r26, 0x4F	; 79
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	ef e4       	ldi	r30, 0x4F	; 79
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	80 61       	ori	r24, 0x10	; 16
    1cb2:	8c 93       	st	X, r24
	                SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1cb4:	af e4       	ldi	r26, 0x4F	; 79
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	ef e4       	ldi	r30, 0x4F	; 79
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	80 68       	ori	r24, 0x80	; 128
    1cc0:	8c 93       	st	X, r24
	                SET_BIT(TCCR1A,TCCR1A_COM1B1);
    1cc2:	af e4       	ldi	r26, 0x4F	; 79
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	ef e4       	ldi	r30, 0x4F	; 79
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	80 62       	ori	r24, 0x20	; 32
    1cce:	8c 93       	st	X, r24
	                break;
	default:break;

	}
	switch (copy_Timer1TopMode)
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	28 2f       	mov	r18, r24
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	3f 83       	std	Y+7, r19	; 0x07
    1cd8:	2e 83       	std	Y+6, r18	; 0x06
    1cda:	8e 81       	ldd	r24, Y+6	; 0x06
    1cdc:	9f 81       	ldd	r25, Y+7	; 0x07
    1cde:	81 30       	cpi	r24, 0x01	; 1
    1ce0:	91 05       	cpc	r25, r1
    1ce2:	b9 f0       	breq	.+46     	; 0x1d12 <MTIMER1_voidInit+0x210>
    1ce4:	2e 81       	ldd	r18, Y+6	; 0x06
    1ce6:	3f 81       	ldd	r19, Y+7	; 0x07
    1ce8:	22 30       	cpi	r18, 0x02	; 2
    1cea:	31 05       	cpc	r19, r1
    1cec:	2c f4       	brge	.+10     	; 0x1cf8 <MTIMER1_voidInit+0x1f6>
    1cee:	8e 81       	ldd	r24, Y+6	; 0x06
    1cf0:	9f 81       	ldd	r25, Y+7	; 0x07
    1cf2:	00 97       	sbiw	r24, 0x00	; 0
    1cf4:	59 f1       	breq	.+86     	; 0x1d4c <MTIMER1_voidInit+0x24a>
    1cf6:	80 c0       	rjmp	.+256    	; 0x1df8 <MTIMER1_voidInit+0x2f6>
    1cf8:	2e 81       	ldd	r18, Y+6	; 0x06
    1cfa:	3f 81       	ldd	r19, Y+7	; 0x07
    1cfc:	22 30       	cpi	r18, 0x02	; 2
    1cfe:	31 05       	cpc	r19, r1
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <MTIMER1_voidInit+0x202>
    1d02:	41 c0       	rjmp	.+130    	; 0x1d86 <MTIMER1_voidInit+0x284>
    1d04:	8e 81       	ldd	r24, Y+6	; 0x06
    1d06:	9f 81       	ldd	r25, Y+7	; 0x07
    1d08:	83 30       	cpi	r24, 0x03	; 3
    1d0a:	91 05       	cpc	r25, r1
    1d0c:	09 f4       	brne	.+2      	; 0x1d10 <MTIMER1_voidInit+0x20e>
    1d0e:	58 c0       	rjmp	.+176    	; 0x1dc0 <MTIMER1_voidInit+0x2be>
    1d10:	73 c0       	rjmp	.+230    	; 0x1df8 <MTIMER1_voidInit+0x2f6>
	{
	case TOP_CTC_ICR1:
		            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1d12:	af e4       	ldi	r26, 0x4F	; 79
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	ef e4       	ldi	r30, 0x4F	; 79
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	8e 7f       	andi	r24, 0xFE	; 254
    1d1e:	8c 93       	st	X, r24
		            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1d20:	af e4       	ldi	r26, 0x4F	; 79
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	ef e4       	ldi	r30, 0x4F	; 79
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	8d 7f       	andi	r24, 0xFD	; 253
    1d2c:	8c 93       	st	X, r24
		            SET_BIT(TCCR1B,TCCR1B_WGM12);
    1d2e:	ae e4       	ldi	r26, 0x4E	; 78
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	ee e4       	ldi	r30, 0x4E	; 78
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	88 60       	ori	r24, 0x08	; 8
    1d3a:	8c 93       	st	X, r24
		            SET_BIT(TCCR1B,TCCR1B_WGM13);
    1d3c:	ae e4       	ldi	r26, 0x4E	; 78
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	ee e4       	ldi	r30, 0x4E	; 78
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	80 61       	ori	r24, 0x10	; 16
    1d48:	8c 93       	st	X, r24
    1d4a:	56 c0       	rjmp	.+172    	; 0x1df8 <MTIMER1_voidInit+0x2f6>
		            break;
	case TOP_CTC_OCR1A:
			        CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1d4c:	af e4       	ldi	r26, 0x4F	; 79
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	ef e4       	ldi	r30, 0x4F	; 79
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	8e 7f       	andi	r24, 0xFE	; 254
    1d58:	8c 93       	st	X, r24
			        CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1d5a:	af e4       	ldi	r26, 0x4F	; 79
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	ef e4       	ldi	r30, 0x4F	; 79
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	8d 7f       	andi	r24, 0xFD	; 253
    1d66:	8c 93       	st	X, r24
			        SET_BIT(TCCR1B,TCCR1B_WGM12);
    1d68:	ae e4       	ldi	r26, 0x4E	; 78
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	ee e4       	ldi	r30, 0x4E	; 78
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	88 60       	ori	r24, 0x08	; 8
    1d74:	8c 93       	st	X, r24
			        CLR_BIT(TCCR1B,TCCR1B_WGM13);
    1d76:	ae e4       	ldi	r26, 0x4E	; 78
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	ee e4       	ldi	r30, 0x4E	; 78
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	8f 7e       	andi	r24, 0xEF	; 239
    1d82:	8c 93       	st	X, r24
    1d84:	39 c0       	rjmp	.+114    	; 0x1df8 <MTIMER1_voidInit+0x2f6>
			        break;
	case TOP_FPWM_ICR1:
		             CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1d86:	af e4       	ldi	r26, 0x4F	; 79
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	ef e4       	ldi	r30, 0x4F	; 79
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	8e 7f       	andi	r24, 0xFE	; 254
    1d92:	8c 93       	st	X, r24
		             SET_BIT(TCCR1A,TCCR1A_WGM11);
    1d94:	af e4       	ldi	r26, 0x4F	; 79
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	ef e4       	ldi	r30, 0x4F	; 79
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	82 60       	ori	r24, 0x02	; 2
    1da0:	8c 93       	st	X, r24
				     SET_BIT(TCCR1B,TCCR1B_WGM12);
    1da2:	ae e4       	ldi	r26, 0x4E	; 78
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	ee e4       	ldi	r30, 0x4E	; 78
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	88 60       	ori	r24, 0x08	; 8
    1dae:	8c 93       	st	X, r24
				     SET_BIT(TCCR1B,TCCR1B_WGM13);
    1db0:	ae e4       	ldi	r26, 0x4E	; 78
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	ee e4       	ldi	r30, 0x4E	; 78
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	80 61       	ori	r24, 0x10	; 16
    1dbc:	8c 93       	st	X, r24
    1dbe:	1c c0       	rjmp	.+56     	; 0x1df8 <MTIMER1_voidInit+0x2f6>
				     break;
	case TOP_FPWM_OCR1A:
		             SET_BIT(TCCR1A,TCCR1A_WGM10);
    1dc0:	af e4       	ldi	r26, 0x4F	; 79
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	ef e4       	ldi	r30, 0x4F	; 79
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	81 60       	ori	r24, 0x01	; 1
    1dcc:	8c 93       	st	X, r24
			         SET_BIT(TCCR1A,TCCR1A_WGM11);
    1dce:	af e4       	ldi	r26, 0x4F	; 79
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	ef e4       	ldi	r30, 0x4F	; 79
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	82 60       	ori	r24, 0x02	; 2
    1dda:	8c 93       	st	X, r24
					 SET_BIT(TCCR1B,TCCR1B_WGM12);
    1ddc:	ae e4       	ldi	r26, 0x4E	; 78
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	ee e4       	ldi	r30, 0x4E	; 78
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	88 60       	ori	r24, 0x08	; 8
    1de8:	8c 93       	st	X, r24
					 SET_BIT(TCCR1B,TCCR1B_WGM13);
    1dea:	ae e4       	ldi	r26, 0x4E	; 78
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	ee e4       	ldi	r30, 0x4E	; 78
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	80 61       	ori	r24, 0x10	; 16
    1df6:	8c 93       	st	X, r24
					 break;
	default: break;

	}
	switch (copy_PrescalerValue)
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	3d 83       	std	Y+5, r19	; 0x05
    1e00:	2c 83       	std	Y+4, r18	; 0x04
    1e02:	8c 81       	ldd	r24, Y+4	; 0x04
    1e04:	9d 81       	ldd	r25, Y+5	; 0x05
    1e06:	81 30       	cpi	r24, 0x01	; 1
    1e08:	91 05       	cpc	r25, r1
    1e0a:	01 f1       	breq	.+64     	; 0x1e4c <MTIMER1_voidInit+0x34a>
    1e0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e10:	22 30       	cpi	r18, 0x02	; 2
    1e12:	31 05       	cpc	r19, r1
    1e14:	89 f1       	breq	.+98     	; 0x1e78 <MTIMER1_voidInit+0x376>
    1e16:	8c 81       	ldd	r24, Y+4	; 0x04
    1e18:	9d 81       	ldd	r25, Y+5	; 0x05
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <MTIMER1_voidInit+0x31e>
    1e1e:	41 c0       	rjmp	.+130    	; 0x1ea2 <MTIMER1_voidInit+0x3a0>
	{
	case DIV_8 :
                    CLR_BIT(TCCR1B,TCCR1B_CS10);
    1e20:	ae e4       	ldi	r26, 0x4E	; 78
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	ee e4       	ldi	r30, 0x4E	; 78
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	8e 7f       	andi	r24, 0xFE	; 254
    1e2c:	8c 93       	st	X, r24
                    SET_BIT(TCCR1B,TCCR1B_CS11);
    1e2e:	ae e4       	ldi	r26, 0x4E	; 78
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	ee e4       	ldi	r30, 0x4E	; 78
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	82 60       	ori	r24, 0x02	; 2
    1e3a:	8c 93       	st	X, r24
                    CLR_BIT(TCCR1B,TCCR1B_CS12);
    1e3c:	ae e4       	ldi	r26, 0x4E	; 78
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	ee e4       	ldi	r30, 0x4E	; 78
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	8b 7f       	andi	r24, 0xFB	; 251
    1e48:	8c 93       	st	X, r24
    1e4a:	2b c0       	rjmp	.+86     	; 0x1ea2 <MTIMER1_voidInit+0x3a0>
                    break;
	case DIV_64 :
		            SET_BIT(TCCR1B,TCCR1B_CS10);
    1e4c:	ae e4       	ldi	r26, 0x4E	; 78
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	ee e4       	ldi	r30, 0x4E	; 78
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	81 60       	ori	r24, 0x01	; 1
    1e58:	8c 93       	st	X, r24
	                SET_BIT(TCCR1B,TCCR1B_CS11);
    1e5a:	ae e4       	ldi	r26, 0x4E	; 78
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	ee e4       	ldi	r30, 0x4E	; 78
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	82 60       	ori	r24, 0x02	; 2
    1e66:	8c 93       	st	X, r24
	                CLR_BIT(TCCR1B,TCCR1B_CS12);
    1e68:	ae e4       	ldi	r26, 0x4E	; 78
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	ee e4       	ldi	r30, 0x4E	; 78
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	8b 7f       	andi	r24, 0xFB	; 251
    1e74:	8c 93       	st	X, r24
    1e76:	15 c0       	rjmp	.+42     	; 0x1ea2 <MTIMER1_voidInit+0x3a0>
	                break;
	case DIV_256 :
		            CLR_BIT(TCCR1B,TCCR1B_CS10);
    1e78:	ae e4       	ldi	r26, 0x4E	; 78
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	ee e4       	ldi	r30, 0x4E	; 78
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	8e 7f       	andi	r24, 0xFE	; 254
    1e84:	8c 93       	st	X, r24
		            CLR_BIT(TCCR1B,TCCR1B_CS11);
    1e86:	ae e4       	ldi	r26, 0x4E	; 78
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	ee e4       	ldi	r30, 0x4E	; 78
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	8d 7f       	andi	r24, 0xFD	; 253
    1e92:	8c 93       	st	X, r24
		            SET_BIT(TCCR1B,TCCR1B_CS12);
    1e94:	ae e4       	ldi	r26, 0x4E	; 78
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	ee e4       	ldi	r30, 0x4E	; 78
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	84 60       	ori	r24, 0x04	; 4
    1ea0:	8c 93       	st	X, r24
		            break;
	default: break;

	}
}
    1ea2:	29 96       	adiw	r28, 0x09	; 9
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	f8 94       	cli
    1ea8:	de bf       	out	0x3e, r29	; 62
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	cd bf       	out	0x3d, r28	; 61
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <MTIMER1_voidSetTopValue>:

void MTIMER1_voidSetTopValue (u16 copu_u16TopValue,Top_t copy_Timer1TopMode)
{
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	00 d0       	rcall	.+0      	; 0x1eba <MTIMER1_voidSetTopValue+0x6>
    1eba:	00 d0       	rcall	.+0      	; 0x1ebc <MTIMER1_voidSetTopValue+0x8>
    1ebc:	0f 92       	push	r0
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	9a 83       	std	Y+2, r25	; 0x02
    1ec4:	89 83       	std	Y+1, r24	; 0x01
    1ec6:	6b 83       	std	Y+3, r22	; 0x03
	switch (copy_Timer1TopMode)
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	28 2f       	mov	r18, r24
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	3d 83       	std	Y+5, r19	; 0x05
    1ed0:	2c 83       	std	Y+4, r18	; 0x04
    1ed2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed6:	82 30       	cpi	r24, 0x02	; 2
    1ed8:	91 05       	cpc	r25, r1
    1eda:	31 f0       	breq	.+12     	; 0x1ee8 <MTIMER1_voidSetTopValue+0x34>
    1edc:	2c 81       	ldd	r18, Y+4	; 0x04
    1ede:	3d 81       	ldd	r19, Y+5	; 0x05
    1ee0:	23 30       	cpi	r18, 0x03	; 3
    1ee2:	31 05       	cpc	r19, r1
    1ee4:	41 f0       	breq	.+16     	; 0x1ef6 <MTIMER1_voidSetTopValue+0x42>
    1ee6:	0d c0       	rjmp	.+26     	; 0x1f02 <MTIMER1_voidSetTopValue+0x4e>
	{
	case TOP_FPWM_ICR1: ICR1=copu_u16TopValue;break;
    1ee8:	e6 e4       	ldi	r30, 0x46	; 70
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef0:	91 83       	std	Z+1, r25	; 0x01
    1ef2:	80 83       	st	Z, r24
    1ef4:	06 c0       	rjmp	.+12     	; 0x1f02 <MTIMER1_voidSetTopValue+0x4e>
	case TOP_FPWM_OCR1A: OCR1A=copu_u16TopValue;break;
    1ef6:	ea e4       	ldi	r30, 0x4A	; 74
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	9a 81       	ldd	r25, Y+2	; 0x02
    1efe:	91 83       	std	Z+1, r25	; 0x01
    1f00:	80 83       	st	Z, r24
	default :break;
	}


}
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <MTIMER1_voidSetDutyCycle>:

void MTIMER1_voidSetDutyCycle(u16 copy_u16DutyCycleValue)
{
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	00 d0       	rcall	.+0      	; 0x1f18 <MTIMER1_voidSetDutyCycle+0x6>
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	9a 83       	std	Y+2, r25	; 0x02
    1f1e:	89 83       	std	Y+1, r24	; 0x01
	 OCR1A=copy_u16DutyCycleValue;
    1f20:	ea e4       	ldi	r30, 0x4A	; 74
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	9a 81       	ldd	r25, Y+2	; 0x02
    1f28:	91 83       	std	Z+1, r25	; 0x01
    1f2a:	80 83       	st	Z, r24
}
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	08 95       	ret

00001f36 <main>:
#include "HLCD_interface.h"
//#include <util/delay.h>

u16 MAPPING(u16 x_max, u16 x_min, u16 y_max, u16 y_min, u16 y);

int main(){
    1f36:	0f 93       	push	r16
    1f38:	1f 93       	push	r17
    1f3a:	df 93       	push	r29
    1f3c:	cf 93       	push	r28
    1f3e:	00 d0       	rcall	.+0      	; 0x1f40 <main+0xa>
    1f40:	00 d0       	rcall	.+0      	; 0x1f42 <main+0xc>
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <main+0xe>
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
	u16 Reading_Value;
	u16 Mapped_Value;
	u16 Angle_degree = 0;
    1f48:	1a 82       	std	Y+2, r1	; 0x02
    1f4a:	19 82       	std	Y+1, r1	; 0x01

	PORT_voidInit();
    1f4c:	0e 94 b4 08 	call	0x1168	; 0x1168 <PORT_voidInit>
	MADC_voidInit();
    1f50:	0e 94 40 08 	call	0x1080	; 0x1080 <MADC_voidInit>
	HLCD_voidInit();
    1f54:	0e 94 df 06 	call	0xdbe	; 0xdbe <HLCD_voidInit>

	MTIMER1_voidInit(FAST_PWM_NON_INVERTING, TOP_FPWM_ICR1, DIV_8);
    1f58:	84 e0       	ldi	r24, 0x04	; 4
    1f5a:	62 e0       	ldi	r22, 0x02	; 2
    1f5c:	40 e0       	ldi	r20, 0x00	; 0
    1f5e:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <MTIMER1_voidInit>
	MTIMER1_voidSetTopValue(20000, TOP_FPWM_ICR1);
    1f62:	80 e2       	ldi	r24, 0x20	; 32
    1f64:	9e e4       	ldi	r25, 0x4E	; 78
    1f66:	62 e0       	ldi	r22, 0x02	; 2
    1f68:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <MTIMER1_voidSetTopValue>

	while(1){
		Reading_Value = MADC_u16GetValue(ADC_CHANNEL0);
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <MADC_u16GetValue>
    1f72:	9e 83       	std	Y+6, r25	; 0x06
    1f74:	8d 83       	std	Y+5, r24	; 0x05
		Mapped_Value = MAPPING(2250,450,1023,0, Reading_Value);
    1f76:	ed 81       	ldd	r30, Y+5	; 0x05
    1f78:	fe 81       	ldd	r31, Y+6	; 0x06
    1f7a:	8a ec       	ldi	r24, 0xCA	; 202
    1f7c:	98 e0       	ldi	r25, 0x08	; 8
    1f7e:	62 ec       	ldi	r22, 0xC2	; 194
    1f80:	71 e0       	ldi	r23, 0x01	; 1
    1f82:	4f ef       	ldi	r20, 0xFF	; 255
    1f84:	53 e0       	ldi	r21, 0x03	; 3
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	8f 01       	movw	r16, r30
    1f8c:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <MAPPING>
    1f90:	9c 83       	std	Y+4, r25	; 0x04
    1f92:	8b 83       	std	Y+3, r24	; 0x03
		Angle_degree = MAPPING(180, 0, 2250, 450, Mapped_Value);
    1f94:	eb 81       	ldd	r30, Y+3	; 0x03
    1f96:	fc 81       	ldd	r31, Y+4	; 0x04
    1f98:	84 eb       	ldi	r24, 0xB4	; 180
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	70 e0       	ldi	r23, 0x00	; 0
    1fa0:	4a ec       	ldi	r20, 0xCA	; 202
    1fa2:	58 e0       	ldi	r21, 0x08	; 8
    1fa4:	22 ec       	ldi	r18, 0xC2	; 194
    1fa6:	31 e0       	ldi	r19, 0x01	; 1
    1fa8:	8f 01       	movw	r16, r30
    1faa:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <MAPPING>
    1fae:	9a 83       	std	Y+2, r25	; 0x02
    1fb0:	89 83       	std	Y+1, r24	; 0x01

		HLCD_SetCursor(0, 0);
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	60 e0       	ldi	r22, 0x00	; 0
    1fb6:	0e 94 96 07 	call	0xf2c	; 0xf2c <HLCD_SetCursor>
		HLCD_SendString("Angle = ");
    1fba:	80 e6       	ldi	r24, 0x60	; 96
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	0e 94 6d 07 	call	0xeda	; 0xeda <HLCD_SendString>
		HLCD_SendInt(Angle_degree);
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc6:	cc 01       	movw	r24, r24
    1fc8:	a0 e0       	ldi	r26, 0x00	; 0
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	bc 01       	movw	r22, r24
    1fce:	cd 01       	movw	r24, r26
    1fd0:	0e 94 b1 07 	call	0xf62	; 0xf62 <HLCD_SendInt>
		HLCD_SendString(" ");
    1fd4:	89 e6       	ldi	r24, 0x69	; 105
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	0e 94 6d 07 	call	0xeda	; 0xeda <HLCD_SendString>

		MTIMER1_voidSetDutyCycle(Mapped_Value);
    1fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fde:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe0:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <MTIMER1_voidSetDutyCycle>
    1fe4:	c3 cf       	rjmp	.-122    	; 0x1f6c <main+0x36>

00001fe6 <MAPPING>:
//		_delay_ms(500);
	}
}

u16 MAPPING(u16 x_max, u16 x_min, u16 y_max, u16 y_min, u16 y){
    1fe6:	ef 92       	push	r14
    1fe8:	ff 92       	push	r15
    1fea:	0f 93       	push	r16
    1fec:	1f 93       	push	r17
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	2c 97       	sbiw	r28, 0x0c	; 12
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61
    2002:	9c 83       	std	Y+4, r25	; 0x04
    2004:	8b 83       	std	Y+3, r24	; 0x03
    2006:	7e 83       	std	Y+6, r23	; 0x06
    2008:	6d 83       	std	Y+5, r22	; 0x05
    200a:	58 87       	std	Y+8, r21	; 0x08
    200c:	4f 83       	std	Y+7, r20	; 0x07
    200e:	3a 87       	std	Y+10, r19	; 0x0a
    2010:	29 87       	std	Y+9, r18	; 0x09
    2012:	1c 87       	std	Y+12, r17	; 0x0c
    2014:	0b 87       	std	Y+11, r16	; 0x0b
	u16 x;
		x = ((((u32) (x_max - x_min) * (y - y_min)) / (y_max - y_min)) + x_min);
    2016:	2b 81       	ldd	r18, Y+3	; 0x03
    2018:	3c 81       	ldd	r19, Y+4	; 0x04
    201a:	8d 81       	ldd	r24, Y+5	; 0x05
    201c:	9e 81       	ldd	r25, Y+6	; 0x06
    201e:	a9 01       	movw	r20, r18
    2020:	48 1b       	sub	r20, r24
    2022:	59 0b       	sbc	r21, r25
    2024:	ca 01       	movw	r24, r20
    2026:	7c 01       	movw	r14, r24
    2028:	00 e0       	ldi	r16, 0x00	; 0
    202a:	10 e0       	ldi	r17, 0x00	; 0
    202c:	2b 85       	ldd	r18, Y+11	; 0x0b
    202e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2030:	89 85       	ldd	r24, Y+9	; 0x09
    2032:	9a 85       	ldd	r25, Y+10	; 0x0a
    2034:	a9 01       	movw	r20, r18
    2036:	48 1b       	sub	r20, r24
    2038:	59 0b       	sbc	r21, r25
    203a:	ca 01       	movw	r24, r20
    203c:	9c 01       	movw	r18, r24
    203e:	40 e0       	ldi	r20, 0x00	; 0
    2040:	50 e0       	ldi	r21, 0x00	; 0
    2042:	c8 01       	movw	r24, r16
    2044:	b7 01       	movw	r22, r14
    2046:	0e 94 4e 10 	call	0x209c	; 0x209c <__mulsi3>
    204a:	7b 01       	movw	r14, r22
    204c:	8c 01       	movw	r16, r24
    204e:	2f 81       	ldd	r18, Y+7	; 0x07
    2050:	38 85       	ldd	r19, Y+8	; 0x08
    2052:	89 85       	ldd	r24, Y+9	; 0x09
    2054:	9a 85       	ldd	r25, Y+10	; 0x0a
    2056:	a9 01       	movw	r20, r18
    2058:	48 1b       	sub	r20, r24
    205a:	59 0b       	sbc	r21, r25
    205c:	ca 01       	movw	r24, r20
    205e:	9c 01       	movw	r18, r24
    2060:	40 e0       	ldi	r20, 0x00	; 0
    2062:	50 e0       	ldi	r21, 0x00	; 0
    2064:	c8 01       	movw	r24, r16
    2066:	b7 01       	movw	r22, r14
    2068:	0e 94 6d 10 	call	0x20da	; 0x20da <__udivmodsi4>
    206c:	da 01       	movw	r26, r20
    206e:	c9 01       	movw	r24, r18
    2070:	9c 01       	movw	r18, r24
    2072:	8d 81       	ldd	r24, Y+5	; 0x05
    2074:	9e 81       	ldd	r25, Y+6	; 0x06
    2076:	82 0f       	add	r24, r18
    2078:	93 1f       	adc	r25, r19
    207a:	9a 83       	std	Y+2, r25	; 0x02
    207c:	89 83       	std	Y+1, r24	; 0x01
	return x;
    207e:	89 81       	ldd	r24, Y+1	; 0x01
    2080:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2082:	2c 96       	adiw	r28, 0x0c	; 12
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	1f 91       	pop	r17
    2094:	0f 91       	pop	r16
    2096:	ff 90       	pop	r15
    2098:	ef 90       	pop	r14
    209a:	08 95       	ret

0000209c <__mulsi3>:
    209c:	62 9f       	mul	r22, r18
    209e:	d0 01       	movw	r26, r0
    20a0:	73 9f       	mul	r23, r19
    20a2:	f0 01       	movw	r30, r0
    20a4:	82 9f       	mul	r24, r18
    20a6:	e0 0d       	add	r30, r0
    20a8:	f1 1d       	adc	r31, r1
    20aa:	64 9f       	mul	r22, r20
    20ac:	e0 0d       	add	r30, r0
    20ae:	f1 1d       	adc	r31, r1
    20b0:	92 9f       	mul	r25, r18
    20b2:	f0 0d       	add	r31, r0
    20b4:	83 9f       	mul	r24, r19
    20b6:	f0 0d       	add	r31, r0
    20b8:	74 9f       	mul	r23, r20
    20ba:	f0 0d       	add	r31, r0
    20bc:	65 9f       	mul	r22, r21
    20be:	f0 0d       	add	r31, r0
    20c0:	99 27       	eor	r25, r25
    20c2:	72 9f       	mul	r23, r18
    20c4:	b0 0d       	add	r27, r0
    20c6:	e1 1d       	adc	r30, r1
    20c8:	f9 1f       	adc	r31, r25
    20ca:	63 9f       	mul	r22, r19
    20cc:	b0 0d       	add	r27, r0
    20ce:	e1 1d       	adc	r30, r1
    20d0:	f9 1f       	adc	r31, r25
    20d2:	bd 01       	movw	r22, r26
    20d4:	cf 01       	movw	r24, r30
    20d6:	11 24       	eor	r1, r1
    20d8:	08 95       	ret

000020da <__udivmodsi4>:
    20da:	a1 e2       	ldi	r26, 0x21	; 33
    20dc:	1a 2e       	mov	r1, r26
    20de:	aa 1b       	sub	r26, r26
    20e0:	bb 1b       	sub	r27, r27
    20e2:	fd 01       	movw	r30, r26
    20e4:	0d c0       	rjmp	.+26     	; 0x2100 <__udivmodsi4_ep>

000020e6 <__udivmodsi4_loop>:
    20e6:	aa 1f       	adc	r26, r26
    20e8:	bb 1f       	adc	r27, r27
    20ea:	ee 1f       	adc	r30, r30
    20ec:	ff 1f       	adc	r31, r31
    20ee:	a2 17       	cp	r26, r18
    20f0:	b3 07       	cpc	r27, r19
    20f2:	e4 07       	cpc	r30, r20
    20f4:	f5 07       	cpc	r31, r21
    20f6:	20 f0       	brcs	.+8      	; 0x2100 <__udivmodsi4_ep>
    20f8:	a2 1b       	sub	r26, r18
    20fa:	b3 0b       	sbc	r27, r19
    20fc:	e4 0b       	sbc	r30, r20
    20fe:	f5 0b       	sbc	r31, r21

00002100 <__udivmodsi4_ep>:
    2100:	66 1f       	adc	r22, r22
    2102:	77 1f       	adc	r23, r23
    2104:	88 1f       	adc	r24, r24
    2106:	99 1f       	adc	r25, r25
    2108:	1a 94       	dec	r1
    210a:	69 f7       	brne	.-38     	; 0x20e6 <__udivmodsi4_loop>
    210c:	60 95       	com	r22
    210e:	70 95       	com	r23
    2110:	80 95       	com	r24
    2112:	90 95       	com	r25
    2114:	9b 01       	movw	r18, r22
    2116:	ac 01       	movw	r20, r24
    2118:	bd 01       	movw	r22, r26
    211a:	cf 01       	movw	r24, r30
    211c:	08 95       	ret

0000211e <__divmodsi4>:
    211e:	97 fb       	bst	r25, 7
    2120:	09 2e       	mov	r0, r25
    2122:	05 26       	eor	r0, r21
    2124:	0e d0       	rcall	.+28     	; 0x2142 <__divmodsi4_neg1>
    2126:	57 fd       	sbrc	r21, 7
    2128:	04 d0       	rcall	.+8      	; 0x2132 <__divmodsi4_neg2>
    212a:	d7 df       	rcall	.-82     	; 0x20da <__udivmodsi4>
    212c:	0a d0       	rcall	.+20     	; 0x2142 <__divmodsi4_neg1>
    212e:	00 1c       	adc	r0, r0
    2130:	38 f4       	brcc	.+14     	; 0x2140 <__divmodsi4_exit>

00002132 <__divmodsi4_neg2>:
    2132:	50 95       	com	r21
    2134:	40 95       	com	r20
    2136:	30 95       	com	r19
    2138:	21 95       	neg	r18
    213a:	3f 4f       	sbci	r19, 0xFF	; 255
    213c:	4f 4f       	sbci	r20, 0xFF	; 255
    213e:	5f 4f       	sbci	r21, 0xFF	; 255

00002140 <__divmodsi4_exit>:
    2140:	08 95       	ret

00002142 <__divmodsi4_neg1>:
    2142:	f6 f7       	brtc	.-4      	; 0x2140 <__divmodsi4_exit>
    2144:	90 95       	com	r25
    2146:	80 95       	com	r24
    2148:	70 95       	com	r23
    214a:	61 95       	neg	r22
    214c:	7f 4f       	sbci	r23, 0xFF	; 255
    214e:	8f 4f       	sbci	r24, 0xFF	; 255
    2150:	9f 4f       	sbci	r25, 0xFF	; 255
    2152:	08 95       	ret

00002154 <__prologue_saves__>:
    2154:	2f 92       	push	r2
    2156:	3f 92       	push	r3
    2158:	4f 92       	push	r4
    215a:	5f 92       	push	r5
    215c:	6f 92       	push	r6
    215e:	7f 92       	push	r7
    2160:	8f 92       	push	r8
    2162:	9f 92       	push	r9
    2164:	af 92       	push	r10
    2166:	bf 92       	push	r11
    2168:	cf 92       	push	r12
    216a:	df 92       	push	r13
    216c:	ef 92       	push	r14
    216e:	ff 92       	push	r15
    2170:	0f 93       	push	r16
    2172:	1f 93       	push	r17
    2174:	cf 93       	push	r28
    2176:	df 93       	push	r29
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	ca 1b       	sub	r28, r26
    217e:	db 0b       	sbc	r29, r27
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	09 94       	ijmp

0000218c <__epilogue_restores__>:
    218c:	2a 88       	ldd	r2, Y+18	; 0x12
    218e:	39 88       	ldd	r3, Y+17	; 0x11
    2190:	48 88       	ldd	r4, Y+16	; 0x10
    2192:	5f 84       	ldd	r5, Y+15	; 0x0f
    2194:	6e 84       	ldd	r6, Y+14	; 0x0e
    2196:	7d 84       	ldd	r7, Y+13	; 0x0d
    2198:	8c 84       	ldd	r8, Y+12	; 0x0c
    219a:	9b 84       	ldd	r9, Y+11	; 0x0b
    219c:	aa 84       	ldd	r10, Y+10	; 0x0a
    219e:	b9 84       	ldd	r11, Y+9	; 0x09
    21a0:	c8 84       	ldd	r12, Y+8	; 0x08
    21a2:	df 80       	ldd	r13, Y+7	; 0x07
    21a4:	ee 80       	ldd	r14, Y+6	; 0x06
    21a6:	fd 80       	ldd	r15, Y+5	; 0x05
    21a8:	0c 81       	ldd	r16, Y+4	; 0x04
    21aa:	1b 81       	ldd	r17, Y+3	; 0x03
    21ac:	aa 81       	ldd	r26, Y+2	; 0x02
    21ae:	b9 81       	ldd	r27, Y+1	; 0x01
    21b0:	ce 0f       	add	r28, r30
    21b2:	d1 1d       	adc	r29, r1
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	f8 94       	cli
    21b8:	de bf       	out	0x3e, r29	; 62
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	cd bf       	out	0x3d, r28	; 61
    21be:	ed 01       	movw	r28, r26
    21c0:	08 95       	ret

000021c2 <_exit>:
    21c2:	f8 94       	cli

000021c4 <__stop_program>:
    21c4:	ff cf       	rjmp	.-2      	; 0x21c4 <__stop_program>
